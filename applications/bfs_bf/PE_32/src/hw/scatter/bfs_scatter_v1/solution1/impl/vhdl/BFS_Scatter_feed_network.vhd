-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BFS_Scatter_feed_network is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rd_req_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    rd_req_V_full_n : IN STD_LOGIC;
    rd_req_V_write : OUT STD_LOGIC;
    rd_start : OUT STD_LOGIC;
    rd_start_ap_vld : OUT STD_LOGIC;
    tmp_dist_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_0_ce0 : OUT STD_LOGIC;
    tmp_dist_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_dist_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_1_ce0 : OUT STD_LOGIC;
    tmp_dist_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_dist_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_2_ce0 : OUT STD_LOGIC;
    tmp_dist_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_dist_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_3_ce0 : OUT STD_LOGIC;
    tmp_dist_3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_dist_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_4_ce0 : OUT STD_LOGIC;
    tmp_dist_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_dist_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_5_ce0 : OUT STD_LOGIC;
    tmp_dist_5_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_dist_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_6_ce0 : OUT STD_LOGIC;
    tmp_dist_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_dist_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_7_ce0 : OUT STD_LOGIC;
    tmp_dist_7_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sw_data_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sw_data_0_V_full_n : IN STD_LOGIC;
    sw_data_0_V_write : OUT STD_LOGIC;
    sw_data_1_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sw_data_1_V_full_n : IN STD_LOGIC;
    sw_data_1_V_write : OUT STD_LOGIC;
    sw_data_2_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sw_data_2_V_full_n : IN STD_LOGIC;
    sw_data_2_V_write : OUT STD_LOGIC;
    sw_data_3_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    sw_data_3_V_full_n : IN STD_LOGIC;
    sw_data_3_V_write : OUT STD_LOGIC;
    rd_port_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    rd_port_TVALID : IN STD_LOGIC;
    rd_port_TREADY : OUT STD_LOGIC;
    rd_port_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    rd_port_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    rd_port_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    n_mem_tuples : IN STD_LOGIC_VECTOR (15 downto 0);
    mem_req_buff_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    mem_req_buff_ce0 : OUT STD_LOGIC;
    mem_req_buff_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of BFS_Scatter_feed_network is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rd_req_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sw_data_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_ln217_reg_1168 : STD_LOGIC_VECTOR (0 downto 0);
    signal sw_data_1_V_blk_n : STD_LOGIC;
    signal icmp_ln874_reg_1164 : STD_LOGIC_VECTOR (0 downto 0);
    signal sw_data_2_V_blk_n : STD_LOGIC;
    signal sw_data_3_V_blk_n : STD_LOGIC;
    signal rd_port_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal srcDist_V_1_reg_412 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_iter_fu_452_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal n_iter_reg_995 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln171_fu_466_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln171_reg_1000 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln171_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln171_reg_1005 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln174_fu_480_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln174_reg_1009 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_fu_488_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1014 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tail_fu_508_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tail_reg_1022 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln171_1_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_fu_519_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_reg_1027 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_2_fu_527_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_1032 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln176_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_pkt_data_V_reg_1046 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal rd_pkt_data_V_reg_1046_pp0_iter1_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal rd_pkt_last_V_fu_556_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_pkt_last_V_reg_1053 : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_pkt_last_V_reg_1053_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_pkt_last_V_reg_1053_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal invld_flag_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invld_flag_reg_1057 : STD_LOGIC_VECTOR (0 downto 0);
    signal invld_flag_reg_1057_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal srcIdx_V_fu_576_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal srcIdx_V_reg_1071 : STD_LOGIC_VECTOR (23 downto 0);
    signal srcIdx_V_reg_1071_pp0_iter1_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal srcIdx_V_reg_1071_pp0_iter2_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_fu_580_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_reg_1076 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_2_reg_1127 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_2_reg_1127_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_dist_7_load_reg_1139 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln195_5_fu_686_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln195_5_reg_1144 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln195_6_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_6_reg_1149 : STD_LOGIC_VECTOR (0 downto 0);
    signal srcDist_V_19_fu_922_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcDist_V_19_reg_1154 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln874_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln217_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_reg_1172 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_3_reg_1177 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_4_reg_1182 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal i_reg_378 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal srcDist_V_reg_389 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_401 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_srcDist_V_1_phi_fu_415_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln177_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal empty_fu_422_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln167_1_fu_432_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln167_fu_442_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln167_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln167_fu_446_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_fu_460_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln174_fu_476_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln171_fu_499_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln174_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_56_fu_515_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln176_fu_533_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln177_fu_542_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_s_fu_560_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_4_fu_584_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln195_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_1_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln195_fu_621_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln195_2_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln195_1_fu_634_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln195_3_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln195_2_fu_647_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln195_4_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln195_3_fu_660_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln195_5_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln195_4_fu_673_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal srcVal_V_fu_699_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln196_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln196_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal srcDist_V_9_fu_768_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln196_1_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln196_1_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal srcDist_V_8_fu_758_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcDist_V_10_fu_788_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln196_2_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln196_2_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal srcDist_V_7_fu_748_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcDist_V_11_fu_806_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln196_3_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln196_3_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal srcDist_V_6_fu_738_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcDist_V_12_fu_824_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln196_4_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln196_4_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal srcDist_V_5_fu_728_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcDist_V_13_fu_842_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln196_5_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln196_5_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal srcDist_V_4_fu_718_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcDist_V_14_fu_860_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln196_6_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln196_6_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal srcDist_V_3_fu_708_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcDist_V_15_fu_878_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln196_7_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln196_7_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal srcDist_V_2_fu_704_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcDist_V_16_fu_896_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal srcDist_V_17_fu_914_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln176_fu_537_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln176_fu_537_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln171_fu_470_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1))) then 
                i_reg_378 <= ap_const_lv13_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_reg_378 <= i_1_reg_1014;
            end if; 
        end if;
    end process;

    j_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((rd_req_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_401 <= j_2_reg_1032;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_1_fu_494_p2 = ap_const_lv1_0) and (icmp_ln171_reg_1005 = ap_const_lv1_0))) then 
                j_reg_401 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    srcDist_V_1_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((rd_pkt_last_V_reg_1053_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                srcDist_V_1_reg_412 <= srcDist_V_19_reg_1154;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln176_fu_537_p2 = ap_const_lv1_1))) then 
                srcDist_V_1_reg_412 <= srcDist_V_reg_389;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_reg_1005 = ap_const_lv1_0))) then
                i_1_reg_1014 <= i_1_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln171_reg_1005 <= icmp_ln171_fu_470_p2;
                n_iter_reg_995 <= n_iter_fu_452_p3;
                sext_ln171_reg_1000 <= sext_ln171_fu_466_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((invld_flag_reg_1057 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln195_6_reg_1149 <= icmp_ln195_6_fu_694_p2;
                select_ln195_5_reg_1144 <= select_ln195_5_fu_686_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln874_reg_1164 <= icmp_ln874_fu_929_p2;
                or_ln217_reg_1168 <= or_ln217_fu_935_p2;
                rd_pkt_last_V_reg_1053_pp0_iter2_reg <= rd_pkt_last_V_reg_1053_pp0_iter1_reg;
                srcIdx_V_reg_1071_pp0_iter2_reg <= srcIdx_V_reg_1071_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                invld_flag_reg_1057 <= invld_flag_fu_570_p2;
                invld_flag_reg_1057_pp0_iter1_reg <= invld_flag_reg_1057;
                rd_pkt_data_V_reg_1046 <= rd_port_TDATA;
                rd_pkt_data_V_reg_1046_pp0_iter1_reg <= rd_pkt_data_V_reg_1046;
                rd_pkt_last_V_reg_1053 <= rd_port_TLAST;
                rd_pkt_last_V_reg_1053_pp0_iter1_reg <= rd_pkt_last_V_reg_1053;
                ret_2_reg_1127 <= rd_port_TDATA(5 downto 3);
                ret_2_reg_1127_pp0_iter1_reg <= ret_2_reg_1127;
                ret_reg_1076 <= ret_fu_580_p1;
                srcIdx_V_reg_1071 <= srcIdx_V_fu_576_p1;
                srcIdx_V_reg_1071_pp0_iter1_reg <= srcIdx_V_reg_1071;
                tmp_dist_7_load_reg_1139 <= tmp_dist_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_2_reg_1032 <= j_2_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_1_fu_494_p2 = ap_const_lv1_0) and (icmp_ln171_reg_1005 = ap_const_lv1_0))) then
                    mul_reg_1027(10 downto 4) <= mul_fu_519_p3(10 downto 4);
                tail_reg_1022 <= tail_fu_508_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln874_fu_929_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_2_reg_1172 <= rd_pkt_data_V_reg_1046_pp0_iter1_reg(55 downto 32);
                p_Result_3_reg_1177 <= rd_pkt_data_V_reg_1046_pp0_iter1_reg(87 downto 64);
                p_Result_4_reg_1182 <= rd_pkt_data_V_reg_1046_pp0_iter1_reg(119 downto 96);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln171_fu_470_p2 = ap_const_lv1_0))) then
                select_ln174_reg_1009 <= select_ln174_fu_480_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                srcDist_V_19_reg_1154 <= srcDist_V_19_fu_922_p3;
                srcDist_V_reg_389 <= srcDist_V_19_fu_922_p3;
            end if;
        end if;
    end process;
    mul_reg_1027(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, rd_req_V_full_n, ap_CS_fsm_state4, ap_enable_reg_pp0_iter3, icmp_ln171_reg_1005, ap_CS_fsm_state2, icmp_ln171_1_fu_494_p2, ap_CS_fsm_state3, icmp_ln176_fu_537_p2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln171_1_fu_494_p2 = ap_const_lv1_1) or (icmp_ln171_reg_1005 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln176_fu_537_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((rd_req_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln167_fu_446_p2 <= std_logic_vector(unsigned(zext_ln167_fu_442_p1) + unsigned(ap_const_lv13_1));
    add_ln177_fu_542_p2 <= std_logic_vector(unsigned(mul_reg_1027) + unsigned(zext_ln176_fu_533_p1));
    and_ln196_1_fu_801_p2 <= (invld_flag_reg_1057_pp0_iter1_reg and icmp_ln196_1_fu_796_p2);
    and_ln196_2_fu_819_p2 <= (invld_flag_reg_1057_pp0_iter1_reg and icmp_ln196_2_fu_814_p2);
    and_ln196_3_fu_837_p2 <= (invld_flag_reg_1057_pp0_iter1_reg and icmp_ln196_3_fu_832_p2);
    and_ln196_4_fu_855_p2 <= (invld_flag_reg_1057_pp0_iter1_reg and icmp_ln196_4_fu_850_p2);
    and_ln196_5_fu_873_p2 <= (invld_flag_reg_1057_pp0_iter1_reg and icmp_ln196_5_fu_868_p2);
    and_ln196_6_fu_891_p2 <= (invld_flag_reg_1057_pp0_iter1_reg and icmp_ln196_6_fu_886_p2);
    and_ln196_7_fu_909_p2 <= (invld_flag_reg_1057_pp0_iter1_reg and icmp_ln196_7_fu_904_p2);
    and_ln196_fu_783_p2 <= (invld_flag_reg_1057_pp0_iter1_reg and icmp_ln196_fu_778_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(sw_data_0_V_full_n, sw_data_1_V_full_n, sw_data_2_V_full_n, sw_data_3_V_full_n, rd_port_TVALID, ap_enable_reg_pp0_iter3, or_ln217_reg_1168, icmp_ln874_reg_1164, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_01001 <= (((rd_port_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (((sw_data_3_V_full_n = ap_const_logic_0) and (icmp_ln874_reg_1164 = ap_const_lv1_0)) or ((sw_data_2_V_full_n = ap_const_logic_0) and (icmp_ln874_reg_1164 = ap_const_lv1_0)) or ((sw_data_1_V_full_n = ap_const_logic_0) and (icmp_ln874_reg_1164 = ap_const_lv1_0)) or ((sw_data_0_V_full_n = ap_const_logic_0) and (or_ln217_reg_1168 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(sw_data_0_V_full_n, sw_data_1_V_full_n, sw_data_2_V_full_n, sw_data_3_V_full_n, rd_port_TVALID, ap_enable_reg_pp0_iter3, or_ln217_reg_1168, icmp_ln874_reg_1164, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= (((rd_port_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (((sw_data_3_V_full_n = ap_const_logic_0) and (icmp_ln874_reg_1164 = ap_const_lv1_0)) or ((sw_data_2_V_full_n = ap_const_logic_0) and (icmp_ln874_reg_1164 = ap_const_lv1_0)) or ((sw_data_1_V_full_n = ap_const_logic_0) and (icmp_ln874_reg_1164 = ap_const_lv1_0)) or ((sw_data_0_V_full_n = ap_const_logic_0) and (or_ln217_reg_1168 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(sw_data_0_V_full_n, sw_data_1_V_full_n, sw_data_2_V_full_n, sw_data_3_V_full_n, rd_port_TVALID, ap_enable_reg_pp0_iter3, or_ln217_reg_1168, icmp_ln874_reg_1164, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_subdone <= (((rd_port_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (((sw_data_3_V_full_n = ap_const_logic_0) and (icmp_ln874_reg_1164 = ap_const_lv1_0)) or ((sw_data_2_V_full_n = ap_const_logic_0) and (icmp_ln874_reg_1164 = ap_const_lv1_0)) or ((sw_data_1_V_full_n = ap_const_logic_0) and (icmp_ln874_reg_1164 = ap_const_lv1_0)) or ((sw_data_0_V_full_n = ap_const_logic_0) and (or_ln217_reg_1168 = ap_const_lv1_0)))));
    end process;


    ap_block_state5_pp0_stage0_iter0_assign_proc : process(rd_port_TVALID)
    begin
                ap_block_state5_pp0_stage0_iter0 <= (rd_port_TVALID = ap_const_logic_0);
    end process;

        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter3_assign_proc : process(sw_data_0_V_full_n, sw_data_1_V_full_n, sw_data_2_V_full_n, sw_data_3_V_full_n, or_ln217_reg_1168, icmp_ln874_reg_1164)
    begin
                ap_block_state8_pp0_stage0_iter3 <= (((sw_data_3_V_full_n = ap_const_logic_0) and (icmp_ln874_reg_1164 = ap_const_lv1_0)) or ((sw_data_2_V_full_n = ap_const_logic_0) and (icmp_ln874_reg_1164 = ap_const_lv1_0)) or ((sw_data_1_V_full_n = ap_const_logic_0) and (icmp_ln874_reg_1164 = ap_const_lv1_0)) or ((sw_data_0_V_full_n = ap_const_logic_0) and (or_ln217_reg_1168 = ap_const_lv1_0)));
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, rd_pkt_last_V_fu_556_p1, ap_block_pp0_stage0_subdone)
    begin
        if (((rd_pkt_last_V_fu_556_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln171_reg_1005, ap_CS_fsm_state2, icmp_ln171_1_fu_494_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln171_1_fu_494_p2 = ap_const_lv1_1) or (icmp_ln171_reg_1005 = ap_const_lv1_1))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_srcDist_V_1_phi_fu_415_p4_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, srcDist_V_1_reg_412, rd_pkt_last_V_reg_1053_pp0_iter2_reg, srcDist_V_19_reg_1154)
    begin
        if (((rd_pkt_last_V_reg_1053_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_srcDist_V_1_phi_fu_415_p4 <= srcDist_V_19_reg_1154;
        else 
            ap_phi_mux_srcDist_V_1_phi_fu_415_p4 <= srcDist_V_1_reg_412;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln171_reg_1005, ap_CS_fsm_state2, icmp_ln171_1_fu_494_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln171_1_fu_494_p2 = ap_const_lv1_1) or (icmp_ln171_reg_1005 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_56_fu_515_p1 <= i_reg_378(7 - 1 downto 0);
    empty_fu_422_p1 <= n_mem_tuples(4 - 1 downto 0);
    i_1_fu_488_p2 <= std_logic_vector(unsigned(i_reg_378) + unsigned(ap_const_lv13_1));
    icmp_ln167_fu_426_p2 <= "1" when (empty_fu_422_p1 = ap_const_lv4_0) else "0";
    icmp_ln171_1_fu_494_p2 <= "1" when (i_reg_378 = n_iter_reg_995) else "0";
    icmp_ln171_fu_470_p2 <= "1" when (n_iter_fu_452_p3 = ap_const_lv13_0) else "0";
    icmp_ln174_fu_503_p2 <= "1" when (zext_ln171_fu_499_p1 = sext_ln171_reg_1000) else "0";
    icmp_ln176_fu_537_p2 <= "1" when (j_reg_401 = tail_reg_1022) else "0";
    icmp_ln195_1_fu_629_p2 <= "1" when (ret_reg_1076 = ap_const_lv3_2) else "0";
    icmp_ln195_2_fu_642_p2 <= "1" when (ret_reg_1076 = ap_const_lv3_3) else "0";
    icmp_ln195_3_fu_655_p2 <= "1" when (ret_reg_1076 = ap_const_lv3_4) else "0";
    icmp_ln195_4_fu_668_p2 <= "1" when (ret_reg_1076 = ap_const_lv3_5) else "0";
    icmp_ln195_5_fu_681_p2 <= "1" when (ret_reg_1076 = ap_const_lv3_6) else "0";
    icmp_ln195_6_fu_694_p2 <= "1" when (ret_reg_1076 = ap_const_lv3_7) else "0";
    icmp_ln195_fu_616_p2 <= "1" when (ret_reg_1076 = ap_const_lv3_1) else "0";
    icmp_ln196_1_fu_796_p2 <= "1" when (ret_2_reg_1127_pp0_iter1_reg = ap_const_lv3_6) else "0";
    icmp_ln196_2_fu_814_p2 <= "1" when (ret_2_reg_1127_pp0_iter1_reg = ap_const_lv3_5) else "0";
    icmp_ln196_3_fu_832_p2 <= "1" when (ret_2_reg_1127_pp0_iter1_reg = ap_const_lv3_4) else "0";
    icmp_ln196_4_fu_850_p2 <= "1" when (ret_2_reg_1127_pp0_iter1_reg = ap_const_lv3_3) else "0";
    icmp_ln196_5_fu_868_p2 <= "1" when (ret_2_reg_1127_pp0_iter1_reg = ap_const_lv3_2) else "0";
    icmp_ln196_6_fu_886_p2 <= "1" when (ret_2_reg_1127_pp0_iter1_reg = ap_const_lv3_1) else "0";
    icmp_ln196_7_fu_904_p2 <= "1" when (ret_2_reg_1127_pp0_iter1_reg = ap_const_lv3_0) else "0";
    icmp_ln196_fu_778_p2 <= "1" when (ret_2_reg_1127_pp0_iter1_reg = ap_const_lv3_7) else "0";
    icmp_ln874_fu_929_p2 <= "1" when (srcDist_V_19_fu_922_p3 = ap_const_lv8_FF) else "0";
    invld_flag_fu_570_p2 <= "1" when (p_Result_s_fu_560_p4 = ap_const_lv8_0) else "0";
    j_2_fu_527_p2 <= std_logic_vector(unsigned(j_reg_401) + unsigned(ap_const_lv5_1));
    mem_req_buff_address0 <= zext_ln177_fu_547_p1(11 - 1 downto 0);

    mem_req_buff_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_req_buff_ce0 <= ap_const_logic_1;
        else 
            mem_req_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_fu_519_p3 <= (empty_56_fu_515_p1 & ap_const_lv4_0);
    n_iter_fu_452_p3 <= 
        zext_ln167_fu_442_p1 when (icmp_ln167_fu_426_p2(0) = '1') else 
        add_ln167_fu_446_p2;
    or_ln217_fu_935_p2 <= (invld_flag_reg_1057_pp0_iter1_reg or icmp_ln874_fu_929_p2);
    p_Result_s_fu_560_p4 <= rd_port_TDATA(31 downto 24);
    rd_pkt_last_V_fu_556_p1 <= rd_port_TLAST;

    rd_port_TDATA_blk_n_assign_proc : process(rd_port_TVALID, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            rd_port_TDATA_blk_n <= rd_port_TVALID;
        else 
            rd_port_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rd_port_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            rd_port_TREADY <= ap_const_logic_1;
        else 
            rd_port_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    rd_req_V_blk_n_assign_proc : process(rd_req_V_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rd_req_V_blk_n <= rd_req_V_full_n;
        else 
            rd_req_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    rd_req_V_din <= mem_req_buff_q0;

    rd_req_V_write_assign_proc : process(rd_req_V_full_n, ap_CS_fsm_state4)
    begin
        if (((rd_req_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            rd_req_V_write <= ap_const_logic_1;
        else 
            rd_req_V_write <= ap_const_logic_0;
        end if; 
    end process;


    rd_start_assign_proc : process(ap_CS_fsm_state3, icmp_ln176_fu_537_p2, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rd_start <= ap_const_logic_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln176_fu_537_p2 = ap_const_lv1_1))) then 
            rd_start <= ap_const_logic_1;
        else 
            rd_start <= 'X';
        end if; 
    end process;


    rd_start_ap_vld_assign_proc : process(ap_CS_fsm_state3, icmp_ln176_fu_537_p2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln176_fu_537_p2 = ap_const_lv1_1)))) then 
            rd_start_ap_vld <= ap_const_logic_1;
        else 
            rd_start_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_4_fu_584_p4 <= rd_port_TDATA(17 downto 6);
    ret_fu_580_p1 <= rd_port_TDATA(3 - 1 downto 0);
    select_ln174_fu_480_p3 <= 
        ap_const_lv5_10 when (icmp_ln167_fu_426_p2(0) = '1') else 
        zext_ln174_fu_476_p1;
    select_ln195_1_fu_634_p3 <= 
        tmp_dist_2_q0 when (icmp_ln195_1_fu_629_p2(0) = '1') else 
        select_ln195_fu_621_p3;
    select_ln195_2_fu_647_p3 <= 
        tmp_dist_3_q0 when (icmp_ln195_2_fu_642_p2(0) = '1') else 
        select_ln195_1_fu_634_p3;
    select_ln195_3_fu_660_p3 <= 
        tmp_dist_4_q0 when (icmp_ln195_3_fu_655_p2(0) = '1') else 
        select_ln195_2_fu_647_p3;
    select_ln195_4_fu_673_p3 <= 
        tmp_dist_5_q0 when (icmp_ln195_4_fu_668_p2(0) = '1') else 
        select_ln195_3_fu_660_p3;
    select_ln195_5_fu_686_p3 <= 
        tmp_dist_6_q0 when (icmp_ln195_5_fu_681_p2(0) = '1') else 
        select_ln195_4_fu_673_p3;
    select_ln195_fu_621_p3 <= 
        tmp_dist_1_q0 when (icmp_ln195_fu_616_p2(0) = '1') else 
        tmp_dist_0_q0;
        sext_ln171_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_fu_460_p2),14));

    srcDist_V_10_fu_788_p3 <= 
        srcDist_V_9_fu_768_p4 when (and_ln196_fu_783_p2(0) = '1') else 
        ap_phi_mux_srcDist_V_1_phi_fu_415_p4;
    srcDist_V_11_fu_806_p3 <= 
        srcDist_V_8_fu_758_p4 when (and_ln196_1_fu_801_p2(0) = '1') else 
        srcDist_V_10_fu_788_p3;
    srcDist_V_12_fu_824_p3 <= 
        srcDist_V_7_fu_748_p4 when (and_ln196_2_fu_819_p2(0) = '1') else 
        srcDist_V_11_fu_806_p3;
    srcDist_V_13_fu_842_p3 <= 
        srcDist_V_6_fu_738_p4 when (and_ln196_3_fu_837_p2(0) = '1') else 
        srcDist_V_12_fu_824_p3;
    srcDist_V_14_fu_860_p3 <= 
        srcDist_V_5_fu_728_p4 when (and_ln196_4_fu_855_p2(0) = '1') else 
        srcDist_V_13_fu_842_p3;
    srcDist_V_15_fu_878_p3 <= 
        srcDist_V_4_fu_718_p4 when (and_ln196_5_fu_873_p2(0) = '1') else 
        srcDist_V_14_fu_860_p3;
    srcDist_V_16_fu_896_p3 <= 
        srcDist_V_3_fu_708_p4 when (and_ln196_6_fu_891_p2(0) = '1') else 
        srcDist_V_15_fu_878_p3;
    srcDist_V_17_fu_914_p3 <= 
        srcDist_V_2_fu_704_p1 when (and_ln196_7_fu_909_p2(0) = '1') else 
        srcDist_V_16_fu_896_p3;
    srcDist_V_19_fu_922_p3 <= 
        srcDist_V_17_fu_914_p3 when (invld_flag_reg_1057_pp0_iter1_reg(0) = '1') else 
        ap_phi_mux_srcDist_V_1_phi_fu_415_p4;
    srcDist_V_2_fu_704_p1 <= srcVal_V_fu_699_p3(8 - 1 downto 0);
    srcDist_V_3_fu_708_p4 <= srcVal_V_fu_699_p3(15 downto 8);
    srcDist_V_4_fu_718_p4 <= srcVal_V_fu_699_p3(23 downto 16);
    srcDist_V_5_fu_728_p4 <= srcVal_V_fu_699_p3(31 downto 24);
    srcDist_V_6_fu_738_p4 <= srcVal_V_fu_699_p3(39 downto 32);
    srcDist_V_7_fu_748_p4 <= srcVal_V_fu_699_p3(47 downto 40);
    srcDist_V_8_fu_758_p4 <= srcVal_V_fu_699_p3(55 downto 48);
    srcDist_V_9_fu_768_p4 <= srcVal_V_fu_699_p3(63 downto 56);
    srcIdx_V_fu_576_p1 <= rd_port_TDATA(24 - 1 downto 0);
    srcVal_V_fu_699_p3 <= 
        tmp_dist_7_load_reg_1139 when (icmp_ln195_6_reg_1149(0) = '1') else 
        select_ln195_5_reg_1144;
    sub_fu_460_p2 <= std_logic_vector(unsigned(n_iter_fu_452_p3) + unsigned(ap_const_lv13_1FFF));

    sw_data_0_V_blk_n_assign_proc : process(sw_data_0_V_full_n, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, or_ln217_reg_1168)
    begin
        if (((or_ln217_reg_1168 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            sw_data_0_V_blk_n <= sw_data_0_V_full_n;
        else 
            sw_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sw_data_0_V_din <= (srcDist_V_19_reg_1154 & srcIdx_V_reg_1071_pp0_iter2_reg);

    sw_data_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, or_ln217_reg_1168, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln217_reg_1168 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            sw_data_0_V_write <= ap_const_logic_1;
        else 
            sw_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    sw_data_1_V_blk_n_assign_proc : process(sw_data_1_V_full_n, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, icmp_ln874_reg_1164)
    begin
        if (((icmp_ln874_reg_1164 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            sw_data_1_V_blk_n <= sw_data_1_V_full_n;
        else 
            sw_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sw_data_1_V_din <= (srcDist_V_19_reg_1154 & p_Result_2_reg_1172);

    sw_data_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln874_reg_1164, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln874_reg_1164 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            sw_data_1_V_write <= ap_const_logic_1;
        else 
            sw_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    sw_data_2_V_blk_n_assign_proc : process(sw_data_2_V_full_n, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, icmp_ln874_reg_1164)
    begin
        if (((icmp_ln874_reg_1164 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            sw_data_2_V_blk_n <= sw_data_2_V_full_n;
        else 
            sw_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sw_data_2_V_din <= (srcDist_V_19_reg_1154 & p_Result_3_reg_1177);

    sw_data_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln874_reg_1164, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln874_reg_1164 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            sw_data_2_V_write <= ap_const_logic_1;
        else 
            sw_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    sw_data_3_V_blk_n_assign_proc : process(sw_data_3_V_full_n, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, icmp_ln874_reg_1164)
    begin
        if (((icmp_ln874_reg_1164 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            sw_data_3_V_blk_n <= sw_data_3_V_full_n;
        else 
            sw_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sw_data_3_V_din <= (srcDist_V_19_reg_1154 & p_Result_4_reg_1182);

    sw_data_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln874_reg_1164, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln874_reg_1164 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            sw_data_3_V_write <= ap_const_logic_1;
        else 
            sw_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tail_fu_508_p3 <= 
        select_ln174_reg_1009 when (icmp_ln174_fu_503_p2(0) = '1') else 
        ap_const_lv5_10;
    tmp_dist_0_address0 <= zext_ln534_fu_594_p1(12 - 1 downto 0);

    tmp_dist_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp_dist_0_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_dist_1_address0 <= zext_ln534_fu_594_p1(12 - 1 downto 0);

    tmp_dist_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp_dist_1_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_dist_2_address0 <= zext_ln534_fu_594_p1(12 - 1 downto 0);

    tmp_dist_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp_dist_2_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_dist_3_address0 <= zext_ln534_fu_594_p1(12 - 1 downto 0);

    tmp_dist_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp_dist_3_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_dist_4_address0 <= zext_ln534_fu_594_p1(12 - 1 downto 0);

    tmp_dist_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp_dist_4_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_dist_5_address0 <= zext_ln534_fu_594_p1(12 - 1 downto 0);

    tmp_dist_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp_dist_5_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_dist_6_address0 <= zext_ln534_fu_594_p1(12 - 1 downto 0);

    tmp_dist_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp_dist_6_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_dist_7_address0 <= zext_ln534_fu_594_p1(12 - 1 downto 0);

    tmp_dist_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tmp_dist_7_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln167_1_fu_432_p4 <= n_mem_tuples(15 downto 4);
    zext_ln167_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln167_1_fu_432_p4),13));
    zext_ln171_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_378),14));
    zext_ln174_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_422_p1),5));
    zext_ln176_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_401),11));
    zext_ln177_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln177_fu_542_p2),64));
    zext_ln534_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_4_fu_584_p4),64));
end behav;
