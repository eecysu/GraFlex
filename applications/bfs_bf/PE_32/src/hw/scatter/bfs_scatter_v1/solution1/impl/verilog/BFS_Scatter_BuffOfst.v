// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BFS_Scatter_BuffOfst (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rd_req_V_din,
        rd_req_V_full_n,
        rd_req_V_write,
        rd_start,
        rd_start_ap_vld,
        ofst_buff_address1,
        ofst_buff_ce1,
        ofst_buff_we1,
        ofst_buff_d1,
        rd_port_TDATA,
        rd_port_TVALID,
        rd_port_TREADY,
        rd_port_TKEEP,
        rd_port_TSTRB,
        rd_port_TLAST,
        size
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_state5 = 7'd8;
parameter    ap_ST_fsm_state6 = 7'd16;
parameter    ap_ST_fsm_state7 = 7'd32;
parameter    ap_ST_fsm_state8 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] rd_req_V_din;
input   rd_req_V_full_n;
output   rd_req_V_write;
output   rd_start;
output   rd_start_ap_vld;
output  [15:0] ofst_buff_address1;
output   ofst_buff_ce1;
output   ofst_buff_we1;
output  [63:0] ofst_buff_d1;
input  [127:0] rd_port_TDATA;
input   rd_port_TVALID;
output   rd_port_TREADY;
input  [15:0] rd_port_TKEEP;
input  [15:0] rd_port_TSTRB;
input  [0:0] rd_port_TLAST;
input  [19:0] size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rd_req_V_write;
reg rd_start;
reg rd_start_ap_vld;
reg[15:0] ofst_buff_address1;
reg ofst_buff_ce1;
reg ofst_buff_we1;
reg[63:0] ofst_buff_d1;
reg rd_port_TREADY;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    rd_req_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln52_reg_538;
reg    rd_port_TDATA_blk_n;
wire    ap_CS_fsm_state6;
reg   [4:0] j_reg_200;
wire   [12:0] n_iter_fu_287_p3;
reg   [12:0] n_iter_reg_484;
wire  signed [13:0] sub_cast_fu_301_p1;
reg  signed [13:0] sub_cast_reg_489;
wire   [3:0] tmp_arlen_V_fu_305_p2;
reg   [3:0] tmp_arlen_V_reg_494;
wire   [4:0] select_ln50_fu_315_p3;
reg   [4:0] select_ln50_reg_499;
wire   [12:0] i_2_fu_323_p2;
reg   [12:0] i_2_reg_504;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln48_fu_329_p2;
wire   [0:0] icmp_ln50_fu_338_p2;
reg   [0:0] icmp_ln50_reg_513;
wire   [4:0] tail_fu_343_p3;
reg   [4:0] tail_reg_518;
wire  signed [5:0] sext_ln58_fu_356_p1;
reg  signed [5:0] sext_ln58_reg_523;
wire   [15:0] shl_ln_fu_364_p3;
reg   [15:0] shl_ln_reg_528;
wire   [4:0] j_3_fu_372_p2;
reg   [4:0] j_3_reg_533;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln52_fu_378_p2;
reg   [0:0] rd_pkt_last_V_reg_542;
wire   [15:0] shl_ln67_fu_442_p2;
reg   [15:0] shl_ln67_reg_546;
reg   [63:0] p_cast_reg_551;
wire   [15:0] ofst_buff_ptr_2_fu_478_p2;
reg   [15:0] ofst_buff_ptr_2_reg_556;
wire    ap_CS_fsm_state7;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [12:0] i_reg_177;
wire    ap_CS_fsm_state8;
reg   [15:0] ofst_buff_ptr_reg_188;
reg   [4:0] ap_phi_mux_j_phi_fu_204_p4;
reg   [15:0] ofst_buff_ptr_1_reg_212;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln67_fu_448_p1;
wire   [63:0] p_sum1_cast_fu_473_p1;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] empty_153_fu_453_p1;
wire   [3:0] empty_fu_223_p1;
wire   [15:0] trunc_ln_fu_233_p4;
wire   [0:0] icmp_ln40_fu_227_p2;
wire   [15:0] add_ln40_fu_243_p2;
wire   [15:0] n_chunk_fu_249_p3;
wire   [3:0] trunc_ln40_fu_257_p1;
wire   [11:0] trunc_ln41_1_fu_267_p4;
wire   [12:0] zext_ln41_fu_277_p1;
wire   [0:0] icmp_ln41_fu_261_p2;
wire   [12:0] add_ln41_fu_281_p2;
wire   [12:0] sub_fu_295_p2;
wire   [4:0] zext_ln50_fu_311_p1;
wire   [13:0] zext_ln48_fu_334_p1;
wire   [4:0] sub36_fu_350_p2;
wire   [11:0] trunc_ln58_fu_360_p1;
wire   [5:0] zext_ln52_fu_383_p1;
wire   [0:0] icmp_ln53_fu_387_p2;
wire   [0:0] and_ln53_fu_392_p2;
wire   [15:0] zext_ln301_fu_404_p1;
wire   [15:0] add_ln301_fu_408_p2;
wire   [23:0] v2_V_fu_413_p3;
wire   [3:0] tmp_arlen_V_2_fu_397_p3;
wire   [27:0] zext_ln308_fu_421_p1;
wire   [15:0] p_sum1_fu_468_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln48_fu_329_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln48_fu_329_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_177 <= i_2_reg_504;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_177 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_538 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_200 <= j_3_reg_533;
    end else if (((icmp_ln48_fu_329_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_200 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (rd_pkt_last_V_reg_542 == 1'd0))) begin
        ofst_buff_ptr_1_reg_212 <= ofst_buff_ptr_2_fu_478_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ofst_buff_ptr_1_reg_212 <= ofst_buff_ptr_reg_188;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ofst_buff_ptr_reg_188 <= ofst_buff_ptr_2_reg_556;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ofst_buff_ptr_reg_188 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_504 <= i_2_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_329_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln50_reg_513 <= icmp_ln50_fu_338_p2;
        sext_ln58_reg_523 <= sext_ln58_fu_356_p1;
        shl_ln_reg_528[15 : 4] <= shl_ln_fu_364_p3[15 : 4];
        tail_reg_518 <= tail_fu_343_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln52_reg_538 <= icmp_ln52_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_3_reg_533 <= j_3_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        n_iter_reg_484 <= n_iter_fu_287_p3;
        select_ln50_reg_499 <= select_ln50_fu_315_p3;
        sub_cast_reg_489 <= sub_cast_fu_301_p1;
        tmp_arlen_V_reg_494 <= tmp_arlen_V_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ofst_buff_ptr_2_reg_556 <= ofst_buff_ptr_2_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_cast_reg_551 <= {{rd_port_TDATA[127:64]}};
        rd_pkt_last_V_reg_542 <= rd_port_TLAST;
        shl_ln67_reg_546[15 : 1] <= shl_ln67_fu_442_p2[15 : 1];
    end
end

always @ (*) begin
    if ((icmp_ln52_fu_378_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln48_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln52_reg_538 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_204_p4 = j_3_reg_533;
    end else begin
        ap_phi_mux_j_phi_fu_204_p4 = j_reg_200;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ofst_buff_address1 = p_sum1_cast_fu_473_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ofst_buff_address1 = zext_ln67_fu_448_p1;
    end else begin
        ofst_buff_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((rd_port_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        ofst_buff_ce1 = 1'b1;
    end else begin
        ofst_buff_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ofst_buff_d1 = p_cast_reg_551;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ofst_buff_d1 = empty_153_fu_453_p1;
    end else begin
        ofst_buff_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((rd_port_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        ofst_buff_we1 = 1'b1;
    end else begin
        ofst_buff_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rd_port_TDATA_blk_n = rd_port_TVALID;
    end else begin
        rd_port_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((rd_port_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        rd_port_TREADY = 1'b1;
    end else begin
        rd_port_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln52_reg_538 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rd_req_V_blk_n = rd_req_V_full_n;
    end else begin
        rd_req_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln52_reg_538 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rd_req_V_write = 1'b1;
    end else begin
        rd_req_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        rd_start = 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rd_start = 1'd1;
    end else begin
        rd_start = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8))) begin
        rd_start_ap_vld = 1'b1;
    end else begin
        rd_start_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln48_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln52_fu_378_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln52_fu_378_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((rd_port_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (rd_pkt_last_V_reg_542 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln301_fu_408_p2 = (shl_ln_reg_528 + zext_ln301_fu_404_p1);

assign add_ln40_fu_243_p2 = (trunc_ln_fu_233_p4 + 16'd1);

assign add_ln41_fu_281_p2 = (zext_ln41_fu_277_p1 + 13'd1);

assign and_ln53_fu_392_p2 = (icmp_ln53_fu_387_p2 & icmp_ln50_reg_513);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln52_reg_538 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rd_req_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln52_reg_538 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rd_req_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln52_reg_538 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rd_req_V_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln52_reg_538 == 1'd0) & (rd_req_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_153_fu_453_p1 = rd_port_TDATA[63:0];

assign empty_fu_223_p1 = size[3:0];

assign i_2_fu_323_p2 = (i_reg_177 + 13'd1);

assign icmp_ln40_fu_227_p2 = ((empty_fu_223_p1 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_261_p2 = ((trunc_ln40_fu_257_p1 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_329_p2 = ((i_reg_177 == n_iter_reg_484) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_338_p2 = ((zext_ln48_fu_334_p1 == sub_cast_reg_489) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_378_p2 = ((ap_phi_mux_j_phi_fu_204_p4 == tail_reg_518) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_387_p2 = ((zext_ln52_fu_383_p1 == sext_ln58_reg_523) ? 1'b1 : 1'b0);

assign j_3_fu_372_p2 = (ap_phi_mux_j_phi_fu_204_p4 + 5'd1);

assign n_chunk_fu_249_p3 = ((icmp_ln40_fu_227_p2[0:0] == 1'b1) ? trunc_ln_fu_233_p4 : add_ln40_fu_243_p2);

assign n_iter_fu_287_p3 = ((icmp_ln41_fu_261_p2[0:0] == 1'b1) ? zext_ln41_fu_277_p1 : add_ln41_fu_281_p2);

assign ofst_buff_ptr_2_fu_478_p2 = (ofst_buff_ptr_1_reg_212 + 16'd1);

assign p_sum1_cast_fu_473_p1 = p_sum1_fu_468_p2;

assign p_sum1_fu_468_p2 = (shl_ln67_reg_546 | 16'd1);

assign rd_req_V_din = {{tmp_arlen_V_2_fu_397_p3}, {zext_ln308_fu_421_p1}};

assign select_ln50_fu_315_p3 = ((icmp_ln41_fu_261_p2[0:0] == 1'b1) ? 5'd16 : zext_ln50_fu_311_p1);

assign sext_ln58_fu_356_p1 = $signed(sub36_fu_350_p2);

assign shl_ln67_fu_442_p2 = ofst_buff_ptr_1_reg_212 << 16'd1;

assign shl_ln_fu_364_p3 = {{trunc_ln58_fu_360_p1}, {4'd0}};

assign sub36_fu_350_p2 = ($signed(tail_fu_343_p3) + $signed(5'd31));

assign sub_cast_fu_301_p1 = $signed(sub_fu_295_p2);

assign sub_fu_295_p2 = ($signed(n_iter_fu_287_p3) + $signed(13'd8191));

assign tail_fu_343_p3 = ((icmp_ln50_fu_338_p2[0:0] == 1'b1) ? select_ln50_reg_499 : 5'd16);

assign tmp_arlen_V_2_fu_397_p3 = ((and_ln53_fu_392_p2[0:0] == 1'b1) ? tmp_arlen_V_reg_494 : 4'd15);

assign tmp_arlen_V_fu_305_p2 = ($signed(empty_fu_223_p1) + $signed(4'd15));

assign trunc_ln40_fu_257_p1 = n_chunk_fu_249_p3[3:0];

assign trunc_ln41_1_fu_267_p4 = {{n_chunk_fu_249_p3[15:4]}};

assign trunc_ln58_fu_360_p1 = i_reg_177[11:0];

assign trunc_ln_fu_233_p4 = {{size[19:4]}};

assign v2_V_fu_413_p3 = {{add_ln301_fu_408_p2}, {8'd0}};

assign zext_ln301_fu_404_p1 = j_reg_200;

assign zext_ln308_fu_421_p1 = v2_V_fu_413_p3;

assign zext_ln41_fu_277_p1 = trunc_ln41_1_fu_267_p4;

assign zext_ln48_fu_334_p1 = i_reg_177;

assign zext_ln50_fu_311_p1 = trunc_ln40_fu_257_p1;

assign zext_ln52_fu_383_p1 = j_reg_200;

assign zext_ln67_fu_448_p1 = shl_ln67_fu_442_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_528[3:0] <= 4'b0000;
    shl_ln67_reg_546[0] <= 1'b0;
end

endmodule //BFS_Scatter_BuffOfst
