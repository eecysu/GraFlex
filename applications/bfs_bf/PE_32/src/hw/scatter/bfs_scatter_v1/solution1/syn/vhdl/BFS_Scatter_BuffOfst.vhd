-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BFS_Scatter_BuffOfst is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rd_req_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    rd_req_V_full_n : IN STD_LOGIC;
    rd_req_V_write : OUT STD_LOGIC;
    rd_start : OUT STD_LOGIC;
    rd_start_ap_vld : OUT STD_LOGIC;
    ofst_buff_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ofst_buff_ce1 : OUT STD_LOGIC;
    ofst_buff_we1 : OUT STD_LOGIC;
    ofst_buff_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    rd_port_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    rd_port_TVALID : IN STD_LOGIC;
    rd_port_TREADY : OUT STD_LOGIC;
    rd_port_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    rd_port_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    rd_port_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    size : IN STD_LOGIC_VECTOR (19 downto 0) );
end;


architecture behav of BFS_Scatter_BuffOfst is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rd_req_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln52_reg_538 : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_port_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_reg_200 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_iter_fu_287_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal n_iter_reg_484 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_cast_fu_301_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_cast_reg_489 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_arlen_V_fu_305_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_arlen_V_reg_494 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln50_fu_315_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln50_reg_499 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_fu_323_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_504 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln48_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_513 : STD_LOGIC_VECTOR (0 downto 0);
    signal tail_fu_343_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tail_reg_518 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln58_fu_356_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln58_reg_523 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_364_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_reg_528 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_3_fu_372_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_reg_533 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln52_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_pkt_last_V_reg_542 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln67_fu_442_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln67_reg_546 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast_reg_551 : STD_LOGIC_VECTOR (63 downto 0);
    signal ofst_buff_ptr_2_fu_478_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ofst_buff_ptr_2_reg_556 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal i_reg_177 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ofst_buff_ptr_reg_188 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_j_phi_fu_204_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ofst_buff_ptr_1_reg_212 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln67_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_sum1_cast_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal empty_153_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_223_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln_fu_233_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln40_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln40_fu_243_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_chunk_fu_249_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln40_fu_257_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln41_1_fu_267_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln41_fu_277_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln41_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln41_fu_281_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_fu_295_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln50_fu_311_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln48_fu_334_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub36_fu_350_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln58_fu_360_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln52_fu_383_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln53_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln301_fu_404_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln301_fu_408_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_fu_413_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_arlen_V_2_fu_397_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln308_fu_421_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_sum1_fu_468_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln48_fu_329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln48_fu_329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_177 <= i_2_reg_504;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_177 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    j_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_reg_538 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_200 <= j_3_reg_533;
            elsif (((icmp_ln48_fu_329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_200 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    ofst_buff_ptr_1_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (rd_pkt_last_V_reg_542 = ap_const_lv1_0))) then 
                ofst_buff_ptr_1_reg_212 <= ofst_buff_ptr_2_fu_478_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                ofst_buff_ptr_1_reg_212 <= ofst_buff_ptr_reg_188;
            end if; 
        end if;
    end process;

    ofst_buff_ptr_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                ofst_buff_ptr_reg_188 <= ofst_buff_ptr_2_reg_556;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ofst_buff_ptr_reg_188 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_504 <= i_2_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln50_reg_513 <= icmp_ln50_fu_338_p2;
                sext_ln58_reg_523 <= sext_ln58_fu_356_p1;
                    shl_ln_reg_528(15 downto 4) <= shl_ln_fu_364_p3(15 downto 4);
                tail_reg_518 <= tail_fu_343_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln52_reg_538 <= icmp_ln52_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                j_3_reg_533 <= j_3_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                n_iter_reg_484 <= n_iter_fu_287_p3;
                select_ln50_reg_499 <= select_ln50_fu_315_p3;
                sub_cast_reg_489 <= sub_cast_fu_301_p1;
                tmp_arlen_V_reg_494 <= tmp_arlen_V_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ofst_buff_ptr_2_reg_556 <= ofst_buff_ptr_2_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_cast_reg_551 <= rd_port_TDATA(127 downto 64);
                rd_pkt_last_V_reg_542 <= rd_port_TLAST;
                    shl_ln67_reg_546(15 downto 1) <= shl_ln67_fu_442_p2(15 downto 1);
            end if;
        end if;
    end process;
    shl_ln_reg_528(3 downto 0) <= "0000";
    shl_ln67_reg_546(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, rd_port_TVALID, ap_CS_fsm_state6, ap_CS_fsm_state2, icmp_ln48_fu_329_p2, ap_enable_reg_pp0_iter0, icmp_ln52_fu_378_p2, rd_pkt_last_V_reg_542, ap_CS_fsm_state7, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln48_fu_329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln52_fu_378_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln52_fu_378_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((rd_port_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (rd_pkt_last_V_reg_542 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln301_fu_408_p2 <= std_logic_vector(unsigned(shl_ln_reg_528) + unsigned(zext_ln301_fu_404_p1));
    add_ln40_fu_243_p2 <= std_logic_vector(unsigned(trunc_ln_fu_233_p4) + unsigned(ap_const_lv16_1));
    add_ln41_fu_281_p2 <= std_logic_vector(unsigned(zext_ln41_fu_277_p1) + unsigned(ap_const_lv13_1));
    and_ln53_fu_392_p2 <= (icmp_ln53_fu_387_p2 and icmp_ln50_reg_513);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(rd_req_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln52_reg_538)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln52_reg_538 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (rd_req_V_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(rd_req_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln52_reg_538)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln52_reg_538 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (rd_req_V_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(rd_req_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln52_reg_538)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln52_reg_538 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (rd_req_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(rd_req_V_full_n, icmp_ln52_reg_538)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln52_reg_538 = ap_const_lv1_0) and (rd_req_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln52_fu_378_p2)
    begin
        if ((icmp_ln52_fu_378_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln48_fu_329_p2)
    begin
        if ((((icmp_ln48_fu_329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_204_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln52_reg_538, j_reg_200, j_3_reg_533)
    begin
        if (((icmp_ln52_reg_538 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_204_p4 <= j_3_reg_533;
        else 
            ap_phi_mux_j_phi_fu_204_p4 <= j_reg_200;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln48_fu_329_p2)
    begin
        if (((icmp_ln48_fu_329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_153_fu_453_p1 <= rd_port_TDATA(64 - 1 downto 0);
    empty_fu_223_p1 <= size(4 - 1 downto 0);
    i_2_fu_323_p2 <= std_logic_vector(unsigned(i_reg_177) + unsigned(ap_const_lv13_1));
    icmp_ln40_fu_227_p2 <= "1" when (empty_fu_223_p1 = ap_const_lv4_0) else "0";
    icmp_ln41_fu_261_p2 <= "1" when (trunc_ln40_fu_257_p1 = ap_const_lv4_0) else "0";
    icmp_ln48_fu_329_p2 <= "1" when (i_reg_177 = n_iter_reg_484) else "0";
    icmp_ln50_fu_338_p2 <= "1" when (zext_ln48_fu_334_p1 = sub_cast_reg_489) else "0";
    icmp_ln52_fu_378_p2 <= "1" when (ap_phi_mux_j_phi_fu_204_p4 = tail_reg_518) else "0";
    icmp_ln53_fu_387_p2 <= "1" when (zext_ln52_fu_383_p1 = sext_ln58_reg_523) else "0";
    j_3_fu_372_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_phi_fu_204_p4) + unsigned(ap_const_lv5_1));
    n_chunk_fu_249_p3 <= 
        trunc_ln_fu_233_p4 when (icmp_ln40_fu_227_p2(0) = '1') else 
        add_ln40_fu_243_p2;
    n_iter_fu_287_p3 <= 
        zext_ln41_fu_277_p1 when (icmp_ln41_fu_261_p2(0) = '1') else 
        add_ln41_fu_281_p2;

    ofst_buff_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln67_fu_448_p1, p_sum1_cast_fu_473_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ofst_buff_address1 <= p_sum1_cast_fu_473_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ofst_buff_address1 <= zext_ln67_fu_448_p1(16 - 1 downto 0);
        else 
            ofst_buff_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ofst_buff_ce1_assign_proc : process(rd_port_TVALID, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((rd_port_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ofst_buff_ce1 <= ap_const_logic_1;
        else 
            ofst_buff_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ofst_buff_d1_assign_proc : process(ap_CS_fsm_state6, p_cast_reg_551, ap_CS_fsm_state7, empty_153_fu_453_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ofst_buff_d1 <= p_cast_reg_551;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ofst_buff_d1 <= empty_153_fu_453_p1;
        else 
            ofst_buff_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ofst_buff_ptr_2_fu_478_p2 <= std_logic_vector(unsigned(ofst_buff_ptr_1_reg_212) + unsigned(ap_const_lv16_1));

    ofst_buff_we1_assign_proc : process(rd_port_TVALID, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((rd_port_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ofst_buff_we1 <= ap_const_logic_1;
        else 
            ofst_buff_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_sum1_cast_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum1_fu_468_p2),64));
    p_sum1_fu_468_p2 <= (shl_ln67_reg_546 or ap_const_lv16_1);

    rd_port_TDATA_blk_n_assign_proc : process(rd_port_TVALID, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rd_port_TDATA_blk_n <= rd_port_TVALID;
        else 
            rd_port_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rd_port_TREADY_assign_proc : process(rd_port_TVALID, ap_CS_fsm_state6)
    begin
        if (((rd_port_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            rd_port_TREADY <= ap_const_logic_1;
        else 
            rd_port_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    rd_req_V_blk_n_assign_proc : process(rd_req_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln52_reg_538)
    begin
        if (((icmp_ln52_reg_538 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rd_req_V_blk_n <= rd_req_V_full_n;
        else 
            rd_req_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    rd_req_V_din <= (tmp_arlen_V_2_fu_397_p3 & zext_ln308_fu_421_p1);

    rd_req_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln52_reg_538, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln52_reg_538 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rd_req_V_write <= ap_const_logic_1;
        else 
            rd_req_V_write <= ap_const_logic_0;
        end if; 
    end process;


    rd_start_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            rd_start <= ap_const_logic_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rd_start <= ap_const_logic_1;
        else 
            rd_start <= 'X';
        end if; 
    end process;


    rd_start_ap_vld_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            rd_start_ap_vld <= ap_const_logic_1;
        else 
            rd_start_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln50_fu_315_p3 <= 
        ap_const_lv5_10 when (icmp_ln41_fu_261_p2(0) = '1') else 
        zext_ln50_fu_311_p1;
        sext_ln58_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub36_fu_350_p2),6));

    shl_ln67_fu_442_p2 <= std_logic_vector(shift_left(unsigned(ofst_buff_ptr_1_reg_212),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    shl_ln_fu_364_p3 <= (trunc_ln58_fu_360_p1 & ap_const_lv4_0);
    sub36_fu_350_p2 <= std_logic_vector(unsigned(tail_fu_343_p3) + unsigned(ap_const_lv5_1F));
        sub_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_fu_295_p2),14));

    sub_fu_295_p2 <= std_logic_vector(unsigned(n_iter_fu_287_p3) + unsigned(ap_const_lv13_1FFF));
    tail_fu_343_p3 <= 
        select_ln50_reg_499 when (icmp_ln50_fu_338_p2(0) = '1') else 
        ap_const_lv5_10;
    tmp_arlen_V_2_fu_397_p3 <= 
        tmp_arlen_V_reg_494 when (and_ln53_fu_392_p2(0) = '1') else 
        ap_const_lv4_F;
    tmp_arlen_V_fu_305_p2 <= std_logic_vector(unsigned(empty_fu_223_p1) + unsigned(ap_const_lv4_F));
    trunc_ln40_fu_257_p1 <= n_chunk_fu_249_p3(4 - 1 downto 0);
    trunc_ln41_1_fu_267_p4 <= n_chunk_fu_249_p3(15 downto 4);
    trunc_ln58_fu_360_p1 <= i_reg_177(12 - 1 downto 0);
    trunc_ln_fu_233_p4 <= size(19 downto 4);
    v2_V_fu_413_p3 <= (add_ln301_fu_408_p2 & ap_const_lv8_0);
    zext_ln301_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_200),16));
    zext_ln308_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v2_V_fu_413_p3),28));
    zext_ln41_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln41_1_fu_267_p4),13));
    zext_ln48_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_177),14));
    zext_ln50_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln40_fu_257_p1),5));
    zext_ln52_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_200),6));
    zext_ln67_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln67_fu_442_p2),64));
end behav;
