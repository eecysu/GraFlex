// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BFS_Scatter_WrDist (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp_dist_0_address0,
        tmp_dist_0_ce0,
        tmp_dist_0_q0,
        tmp_dist_1_address0,
        tmp_dist_1_ce0,
        tmp_dist_1_q0,
        tmp_dist_2_address0,
        tmp_dist_2_ce0,
        tmp_dist_2_q0,
        tmp_dist_3_address0,
        tmp_dist_3_ce0,
        tmp_dist_3_q0,
        tmp_dist_4_address0,
        tmp_dist_4_ce0,
        tmp_dist_4_q0,
        tmp_dist_5_address0,
        tmp_dist_5_ce0,
        tmp_dist_5_q0,
        tmp_dist_6_address0,
        tmp_dist_6_ce0,
        tmp_dist_6_q0,
        tmp_dist_7_address0,
        tmp_dist_7_ce0,
        tmp_dist_7_q0,
        wr_port_TDATA,
        wr_port_TVALID,
        wr_port_TREADY,
        wr_port_TKEEP,
        wr_port_TSTRB,
        wr_port_TLAST,
        idx
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state7 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] tmp_dist_0_address0;
output   tmp_dist_0_ce0;
input  [63:0] tmp_dist_0_q0;
output  [11:0] tmp_dist_1_address0;
output   tmp_dist_1_ce0;
input  [63:0] tmp_dist_1_q0;
output  [11:0] tmp_dist_2_address0;
output   tmp_dist_2_ce0;
input  [63:0] tmp_dist_2_q0;
output  [11:0] tmp_dist_3_address0;
output   tmp_dist_3_ce0;
input  [63:0] tmp_dist_3_q0;
output  [11:0] tmp_dist_4_address0;
output   tmp_dist_4_ce0;
input  [63:0] tmp_dist_4_q0;
output  [11:0] tmp_dist_5_address0;
output   tmp_dist_5_ce0;
input  [63:0] tmp_dist_5_q0;
output  [11:0] tmp_dist_6_address0;
output   tmp_dist_6_ce0;
input  [63:0] tmp_dist_6_q0;
output  [11:0] tmp_dist_7_address0;
output   tmp_dist_7_ce0;
input  [63:0] tmp_dist_7_q0;
output  [127:0] wr_port_TDATA;
output   wr_port_TVALID;
input   wr_port_TREADY;
output  [15:0] wr_port_TKEEP;
output  [15:0] wr_port_TSTRB;
output  [0:0] wr_port_TLAST;
input  [7:0] idx;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg tmp_dist_0_ce0;
reg tmp_dist_1_ce0;
reg tmp_dist_2_ce0;
reg tmp_dist_3_ce0;
reg tmp_dist_4_ce0;
reg tmp_dist_5_ce0;
reg tmp_dist_6_ce0;
reg tmp_dist_7_ce0;
reg[127:0] wr_port_TDATA;
reg wr_port_TVALID;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    wr_port_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln15_reg_297;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [4:0] i_reg_209;
wire   [4:0] add_ln15_fu_220_p2;
reg   [4:0] add_ln15_reg_292;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln15_fu_226_p2;
wire   [127:0] p_Result_8_fu_264_p3;
reg   [127:0] p_Result_8_reg_341;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage1_11001;
wire   [127:0] p_Result_9_fu_272_p3;
reg   [127:0] p_Result_9_reg_346;
reg   [63:0] v2_V_3_reg_351;
reg   [63:0] v1_V_7_reg_356;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage3_subdone;
reg   [4:0] ap_phi_mux_i_phi_fu_213_p4;
wire   [63:0] zext_ln308_fu_243_p1;
wire   [127:0] p_Result_s_fu_255_p3;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_01001;
reg    ap_block_pp0_stage3_01001;
wire   [127:0] p_Result_10_fu_280_p3;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_pp0_stage3_11001;
wire   [3:0] trunc_ln18_fu_232_p1;
wire   [11:0] add_ln_fu_236_p3;
wire    ap_CS_fsm_state7;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_220;
reg    ap_condition_226;
reg    ap_condition_231;
reg    ap_condition_238;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_209 <= 5'd0;
    end else if (((icmp_ln15_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_209 <= add_ln15_reg_292;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln15_reg_292 <= add_ln15_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln15_reg_297 <= icmp_ln15_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_Result_8_reg_341 <= p_Result_8_fu_264_p3;
        p_Result_9_reg_346 <= p_Result_9_fu_272_p3;
        v1_V_7_reg_356 <= tmp_dist_7_q0;
        v2_V_3_reg_351 <= tmp_dist_6_q0;
    end
end

always @ (*) begin
    if ((icmp_ln15_fu_226_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_213_p4 = add_ln15_reg_292;
    end else begin
        ap_phi_mux_i_phi_fu_213_p4 = i_reg_209;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_dist_0_ce0 = 1'b1;
    end else begin
        tmp_dist_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_dist_1_ce0 = 1'b1;
    end else begin
        tmp_dist_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_dist_2_ce0 = 1'b1;
    end else begin
        tmp_dist_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_dist_3_ce0 = 1'b1;
    end else begin
        tmp_dist_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_dist_4_ce0 = 1'b1;
    end else begin
        tmp_dist_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_dist_5_ce0 = 1'b1;
    end else begin
        tmp_dist_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_dist_6_ce0 = 1'b1;
    end else begin
        tmp_dist_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_dist_7_ce0 = 1'b1;
    end else begin
        tmp_dist_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln15_reg_297 == 1'd0)) begin
        if ((1'b1 == ap_condition_238)) begin
            wr_port_TDATA = p_Result_10_fu_280_p3;
        end else if ((1'b1 == ap_condition_231)) begin
            wr_port_TDATA = p_Result_9_reg_346;
        end else if ((1'b1 == ap_condition_226)) begin
            wr_port_TDATA = p_Result_8_reg_341;
        end else if ((1'b1 == ap_condition_220)) begin
            wr_port_TDATA = p_Result_s_fu_255_p3;
        end else begin
            wr_port_TDATA = 'bx;
        end
    end else begin
        wr_port_TDATA = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln15_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln15_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln15_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln15_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        wr_port_TDATA_blk_n = wr_port_TREADY;
    end else begin
        wr_port_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln15_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln15_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln15_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln15_reg_297 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        wr_port_TVALID = 1'b1;
    end else begin
        wr_port_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln15_fu_226_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln15_fu_226_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_fu_220_p2 = (ap_phi_mux_i_phi_fu_213_p4 + 5'd1);

assign add_ln_fu_236_p3 = {{idx}, {trunc_ln18_fu_232_p1}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((icmp_ln15_reg_297 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (wr_port_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((icmp_ln15_reg_297 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (wr_port_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0))));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((icmp_ln15_reg_297 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (wr_port_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0))));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state5_io = ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage3_iter0 = ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((icmp_ln15_reg_297 == 1'd0) & (wr_port_TREADY == 1'b0));
end

always @ (*) begin
    ap_condition_220 = ((1'b0 == ap_block_pp0_stage1_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_226 = ((1'b0 == ap_block_pp0_stage2_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_condition_231 = ((1'b0 == ap_block_pp0_stage3_01001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

always @ (*) begin
    ap_condition_238 = ((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln15_fu_226_p2 = ((ap_phi_mux_i_phi_fu_213_p4 == 5'd16) ? 1'b1 : 1'b0);

assign p_Result_10_fu_280_p3 = {{v1_V_7_reg_356}, {v2_V_3_reg_351}};

assign p_Result_8_fu_264_p3 = {{tmp_dist_3_q0}, {tmp_dist_2_q0}};

assign p_Result_9_fu_272_p3 = {{tmp_dist_5_q0}, {tmp_dist_4_q0}};

assign p_Result_s_fu_255_p3 = {{tmp_dist_1_q0}, {tmp_dist_0_q0}};

assign tmp_dist_0_address0 = zext_ln308_fu_243_p1;

assign tmp_dist_1_address0 = zext_ln308_fu_243_p1;

assign tmp_dist_2_address0 = zext_ln308_fu_243_p1;

assign tmp_dist_3_address0 = zext_ln308_fu_243_p1;

assign tmp_dist_4_address0 = zext_ln308_fu_243_p1;

assign tmp_dist_5_address0 = zext_ln308_fu_243_p1;

assign tmp_dist_6_address0 = zext_ln308_fu_243_p1;

assign tmp_dist_7_address0 = zext_ln308_fu_243_p1;

assign trunc_ln18_fu_232_p1 = ap_phi_mux_i_phi_fu_213_p4[3:0];

assign wr_port_TKEEP = 16'd0;

assign wr_port_TLAST = 1'd0;

assign wr_port_TSTRB = 16'd0;

assign zext_ln308_fu_243_p1 = add_ln_fu_236_p3;

endmodule //BFS_Scatter_WrDist
