-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BFS_Scatter_WrDist is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tmp_dist_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_0_ce0 : OUT STD_LOGIC;
    tmp_dist_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_dist_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_1_ce0 : OUT STD_LOGIC;
    tmp_dist_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_dist_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_2_ce0 : OUT STD_LOGIC;
    tmp_dist_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_dist_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_3_ce0 : OUT STD_LOGIC;
    tmp_dist_3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_dist_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_4_ce0 : OUT STD_LOGIC;
    tmp_dist_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_dist_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_5_ce0 : OUT STD_LOGIC;
    tmp_dist_5_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_dist_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_6_ce0 : OUT STD_LOGIC;
    tmp_dist_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_dist_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_dist_7_ce0 : OUT STD_LOGIC;
    tmp_dist_7_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    wr_port_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    wr_port_TVALID : OUT STD_LOGIC;
    wr_port_TREADY : IN STD_LOGIC;
    wr_port_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    wr_port_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    wr_port_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    idx : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of BFS_Scatter_WrDist is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal wr_port_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln15_reg_297 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_reg_209 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln15_fu_220_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln15_reg_292 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln15_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_264_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_8_reg_341 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_Result_9_fu_272_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_9_reg_346 : STD_LOGIC_VECTOR (127 downto 0);
    signal v2_V_3_reg_351 : STD_LOGIC_VECTOR (63 downto 0);
    signal v1_V_7_reg_356 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_213_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln308_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_255_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal p_Result_10_fu_280_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal trunc_ln18_fu_232_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln_fu_236_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_220 : BOOLEAN;
    signal ap_condition_226 : BOOLEAN;
    signal ap_condition_231 : BOOLEAN;
    signal ap_condition_238 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_209 <= ap_const_lv5_0;
            elsif (((icmp_ln15_reg_297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_209 <= add_ln15_reg_292;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln15_reg_292 <= add_ln15_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln15_reg_297 <= icmp_ln15_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_Result_8_reg_341 <= p_Result_8_fu_264_p3;
                p_Result_9_reg_346 <= p_Result_9_fu_272_p3;
                v1_V_7_reg_356 <= tmp_dist_7_q0;
                v2_V_3_reg_351 <= tmp_dist_6_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln15_fu_226_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln15_fu_226_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln15_fu_226_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln15_fu_220_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_213_p4) + unsigned(ap_const_lv5_1));
    add_ln_fu_236_p3 <= (idx & trunc_ln18_fu_232_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(wr_port_TREADY, icmp_ln15_reg_297, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(wr_port_TREADY, icmp_ln15_reg_297, ap_enable_reg_pp0_iter1, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(wr_port_TREADY, icmp_ln15_reg_297, ap_enable_reg_pp0_iter1, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state6_io) or ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(wr_port_TREADY, ap_enable_reg_pp0_iter0, icmp_ln15_reg_297)
    begin
                ap_block_pp0_stage1_01001 <= ((icmp_ln15_reg_297 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (wr_port_TREADY = ap_const_logic_0));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(wr_port_TREADY, ap_enable_reg_pp0_iter0, icmp_ln15_reg_297, ap_block_state3_io)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(wr_port_TREADY, ap_enable_reg_pp0_iter0, icmp_ln15_reg_297, ap_block_state3_io)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(wr_port_TREADY, ap_enable_reg_pp0_iter0, icmp_ln15_reg_297)
    begin
                ap_block_pp0_stage2_01001 <= ((icmp_ln15_reg_297 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (wr_port_TREADY = ap_const_logic_0));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(wr_port_TREADY, ap_enable_reg_pp0_iter0, icmp_ln15_reg_297, ap_block_state4_io)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(wr_port_TREADY, ap_enable_reg_pp0_iter0, icmp_ln15_reg_297, ap_block_state4_io)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(wr_port_TREADY, ap_enable_reg_pp0_iter0, icmp_ln15_reg_297)
    begin
                ap_block_pp0_stage3_01001 <= ((icmp_ln15_reg_297 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (wr_port_TREADY = ap_const_logic_0));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(wr_port_TREADY, ap_enable_reg_pp0_iter0, icmp_ln15_reg_297, ap_block_state5_io)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(wr_port_TREADY, ap_enable_reg_pp0_iter0, icmp_ln15_reg_297, ap_block_state5_io)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state5_io) or ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0))));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(wr_port_TREADY, icmp_ln15_reg_297)
    begin
                ap_block_state3_io <= ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage1_iter0_assign_proc : process(wr_port_TREADY, icmp_ln15_reg_297)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(wr_port_TREADY, icmp_ln15_reg_297)
    begin
                ap_block_state4_io <= ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage2_iter0_assign_proc : process(wr_port_TREADY, icmp_ln15_reg_297)
    begin
                ap_block_state4_pp0_stage2_iter0 <= ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(wr_port_TREADY, icmp_ln15_reg_297)
    begin
                ap_block_state5_io <= ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage3_iter0_assign_proc : process(wr_port_TREADY, icmp_ln15_reg_297)
    begin
                ap_block_state5_pp0_stage3_iter0 <= ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(wr_port_TREADY, icmp_ln15_reg_297)
    begin
                ap_block_state6_io <= ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0));
    end process;


    ap_block_state6_pp0_stage0_iter1_assign_proc : process(wr_port_TREADY, icmp_ln15_reg_297)
    begin
                ap_block_state6_pp0_stage0_iter1 <= ((icmp_ln15_reg_297 = ap_const_lv1_0) and (wr_port_TREADY = ap_const_logic_0));
    end process;


    ap_condition_220_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_01001)
    begin
                ap_condition_220 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_226_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_01001)
    begin
                ap_condition_226 <= ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_condition_231_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_01001)
    begin
                ap_condition_231 <= ((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3));
    end process;


    ap_condition_238_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_238 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln15_fu_226_p2)
    begin
        if ((icmp_ln15_fu_226_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_213_p4_assign_proc : process(icmp_ln15_reg_297, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_reg_209, add_ln15_reg_292)
    begin
        if (((icmp_ln15_reg_297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_213_p4 <= add_ln15_reg_292;
        else 
            ap_phi_mux_i_phi_fu_213_p4 <= i_reg_209;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln15_fu_226_p2 <= "1" when (ap_phi_mux_i_phi_fu_213_p4 = ap_const_lv5_10) else "0";
    p_Result_10_fu_280_p3 <= (v1_V_7_reg_356 & v2_V_3_reg_351);
    p_Result_8_fu_264_p3 <= (tmp_dist_3_q0 & tmp_dist_2_q0);
    p_Result_9_fu_272_p3 <= (tmp_dist_5_q0 & tmp_dist_4_q0);
    p_Result_s_fu_255_p3 <= (tmp_dist_1_q0 & tmp_dist_0_q0);
    tmp_dist_0_address0 <= zext_ln308_fu_243_p1(12 - 1 downto 0);

    tmp_dist_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_dist_0_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_dist_1_address0 <= zext_ln308_fu_243_p1(12 - 1 downto 0);

    tmp_dist_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_dist_1_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_dist_2_address0 <= zext_ln308_fu_243_p1(12 - 1 downto 0);

    tmp_dist_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_dist_2_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_dist_3_address0 <= zext_ln308_fu_243_p1(12 - 1 downto 0);

    tmp_dist_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_dist_3_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_dist_4_address0 <= zext_ln308_fu_243_p1(12 - 1 downto 0);

    tmp_dist_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_dist_4_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_dist_5_address0 <= zext_ln308_fu_243_p1(12 - 1 downto 0);

    tmp_dist_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_dist_5_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_dist_6_address0 <= zext_ln308_fu_243_p1(12 - 1 downto 0);

    tmp_dist_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_dist_6_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_dist_7_address0 <= zext_ln308_fu_243_p1(12 - 1 downto 0);

    tmp_dist_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_dist_7_ce0 <= ap_const_logic_1;
        else 
            tmp_dist_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln18_fu_232_p1 <= ap_phi_mux_i_phi_fu_213_p4(4 - 1 downto 0);

    wr_port_TDATA_assign_proc : process(icmp_ln15_reg_297, p_Result_8_reg_341, p_Result_9_reg_346, p_Result_s_fu_255_p3, p_Result_10_fu_280_p3, ap_condition_220, ap_condition_226, ap_condition_231, ap_condition_238)
    begin
        if ((icmp_ln15_reg_297 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_238)) then 
                wr_port_TDATA <= p_Result_10_fu_280_p3;
            elsif ((ap_const_boolean_1 = ap_condition_231)) then 
                wr_port_TDATA <= p_Result_9_reg_346;
            elsif ((ap_const_boolean_1 = ap_condition_226)) then 
                wr_port_TDATA <= p_Result_8_reg_341;
            elsif ((ap_const_boolean_1 = ap_condition_220)) then 
                wr_port_TDATA <= p_Result_s_fu_255_p3;
            else 
                wr_port_TDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            wr_port_TDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wr_port_TDATA_blk_n_assign_proc : process(wr_port_TREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln15_reg_297, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if ((((icmp_ln15_reg_297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln15_reg_297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln15_reg_297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln15_reg_297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            wr_port_TDATA_blk_n <= wr_port_TREADY;
        else 
            wr_port_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    wr_port_TKEEP <= ap_const_lv16_0;
    wr_port_TLAST <= ap_const_lv1_0;
    wr_port_TSTRB <= ap_const_lv16_0;

    wr_port_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln15_reg_297, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((icmp_ln15_reg_297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln15_reg_297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln15_reg_297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln15_reg_297 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            wr_port_TVALID <= ap_const_logic_1;
        else 
            wr_port_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln308_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_236_p3),64));
end behav;
