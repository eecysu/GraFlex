-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BFS_Scatter_BuffOfst is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rd_req_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    rd_req_V_full_n : IN STD_LOGIC;
    rd_req_V_write : OUT STD_LOGIC;
    rd_start : OUT STD_LOGIC;
    rd_start_ap_vld : OUT STD_LOGIC;
    ofst_buff_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
    ofst_buff_ce1 : OUT STD_LOGIC;
    ofst_buff_we1 : OUT STD_LOGIC;
    ofst_buff_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    rd_port_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    rd_port_TVALID : IN STD_LOGIC;
    rd_port_TREADY : OUT STD_LOGIC;
    rd_port_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    rd_port_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    rd_port_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    size : IN STD_LOGIC_VECTOR (19 downto 0) );
end;


architecture behav of BFS_Scatter_BuffOfst is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rd_req_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln46_reg_546 : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_port_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_reg_202 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_iter_fu_289_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal n_iter_reg_492 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_cast_fu_303_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_cast_reg_497 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_arlen_V_fu_307_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_arlen_V_reg_502 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln44_fu_317_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln44_reg_507 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_fu_325_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_512 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln42_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_521 : STD_LOGIC_VECTOR (0 downto 0);
    signal tail_fu_345_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tail_reg_526 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln52_fu_358_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln52_reg_531 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_366_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_reg_536 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_3_fu_374_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_reg_541 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln46_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_pkt_last_V_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln3_fu_448_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln3_reg_554 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_cast_reg_559 : STD_LOGIC_VECTOR (63 downto 0);
    signal ofst_buff_ptr_2_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ofst_buff_ptr_2_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal i_reg_179 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ofst_buff_ptr_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_j_phi_fu_206_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ofst_buff_ptr_1_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln61_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_sum1_cast_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal empty_160_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_225_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln_fu_235_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln34_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_fu_245_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_chunk_fu_251_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln34_fu_259_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln35_1_fu_269_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln35_fu_279_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln35_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_fu_283_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_fu_297_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln44_fu_313_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln42_fu_336_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub36_fu_352_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln52_fu_362_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln46_fu_385_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln47_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln301_fu_406_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln301_fu_410_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal v2_V_fu_415_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_arlen_V_2_fu_399_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln308_fu_423_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln61_fu_444_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_sum1_fu_476_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln42_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln42_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_179 <= i_2_reg_512;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_179 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    j_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_reg_546 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_202 <= j_3_reg_541;
            elsif (((icmp_ln42_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_202 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    ofst_buff_ptr_1_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (rd_pkt_last_V_reg_550 = ap_const_lv1_0))) then 
                ofst_buff_ptr_1_reg_214 <= ofst_buff_ptr_2_fu_486_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                ofst_buff_ptr_1_reg_214 <= ofst_buff_ptr_reg_190;
            end if; 
        end if;
    end process;

    ofst_buff_ptr_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                ofst_buff_ptr_reg_190 <= ofst_buff_ptr_2_reg_564;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ofst_buff_ptr_reg_190 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_512 <= i_2_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln44_reg_521 <= icmp_ln44_fu_340_p2;
                sext_ln52_reg_531 <= sext_ln52_fu_358_p1;
                    shl_ln_reg_536(15 downto 4) <= shl_ln_fu_366_p3(15 downto 4);
                tail_reg_526 <= tail_fu_345_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln46_reg_546 <= icmp_ln46_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                j_3_reg_541 <= j_3_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                n_iter_reg_492 <= n_iter_fu_289_p3;
                select_ln44_reg_507 <= select_ln44_fu_317_p3;
                sub_cast_reg_497 <= sub_cast_fu_303_p1;
                tmp_arlen_V_reg_502 <= tmp_arlen_V_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ofst_buff_ptr_2_reg_564 <= ofst_buff_ptr_2_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_cast_reg_559 <= rd_port_TDATA(127 downto 64);
                rd_pkt_last_V_reg_550 <= rd_port_TLAST;
                    shl_ln3_reg_554(18 downto 1) <= shl_ln3_fu_448_p3(18 downto 1);
            end if;
        end if;
    end process;
    shl_ln_reg_536(3 downto 0) <= "0000";
    shl_ln3_reg_554(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, rd_port_TVALID, ap_CS_fsm_state6, ap_CS_fsm_state2, icmp_ln42_fu_331_p2, ap_enable_reg_pp0_iter0, icmp_ln46_fu_380_p2, rd_pkt_last_V_reg_550, ap_CS_fsm_state7, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln42_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln46_fu_380_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln46_fu_380_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((rd_port_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (rd_pkt_last_V_reg_550 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln301_fu_410_p2 <= std_logic_vector(unsigned(shl_ln_reg_536) + unsigned(zext_ln301_fu_406_p1));
    add_ln34_fu_245_p2 <= std_logic_vector(unsigned(trunc_ln_fu_235_p4) + unsigned(ap_const_lv16_1));
    add_ln35_fu_283_p2 <= std_logic_vector(unsigned(zext_ln35_fu_279_p1) + unsigned(ap_const_lv13_1));
    and_ln47_fu_394_p2 <= (icmp_ln47_fu_389_p2 and icmp_ln44_reg_521);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(rd_req_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln46_reg_546)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln46_reg_546 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (rd_req_V_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(rd_req_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln46_reg_546)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln46_reg_546 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (rd_req_V_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(rd_req_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln46_reg_546)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln46_reg_546 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (rd_req_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(rd_req_V_full_n, icmp_ln46_reg_546)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln46_reg_546 = ap_const_lv1_0) and (rd_req_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln46_fu_380_p2)
    begin
        if ((icmp_ln46_fu_380_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln42_fu_331_p2)
    begin
        if ((((icmp_ln42_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_206_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln46_reg_546, j_reg_202, j_3_reg_541)
    begin
        if (((icmp_ln46_reg_546 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_206_p4 <= j_3_reg_541;
        else 
            ap_phi_mux_j_phi_fu_206_p4 <= j_reg_202;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln42_fu_331_p2)
    begin
        if (((icmp_ln42_fu_331_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_160_fu_461_p1 <= rd_port_TDATA(64 - 1 downto 0);
    empty_fu_225_p1 <= size(4 - 1 downto 0);
    i_2_fu_325_p2 <= std_logic_vector(unsigned(i_reg_179) + unsigned(ap_const_lv13_1));
    icmp_ln34_fu_229_p2 <= "1" when (empty_fu_225_p1 = ap_const_lv4_0) else "0";
    icmp_ln35_fu_263_p2 <= "1" when (trunc_ln34_fu_259_p1 = ap_const_lv4_0) else "0";
    icmp_ln42_fu_331_p2 <= "1" when (i_reg_179 = n_iter_reg_492) else "0";
    icmp_ln44_fu_340_p2 <= "1" when (zext_ln42_fu_336_p1 = sub_cast_reg_497) else "0";
    icmp_ln46_fu_380_p2 <= "1" when (ap_phi_mux_j_phi_fu_206_p4 = tail_reg_526) else "0";
    icmp_ln47_fu_389_p2 <= "1" when (zext_ln46_fu_385_p1 = sext_ln52_reg_531) else "0";
    j_3_fu_374_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_phi_fu_206_p4) + unsigned(ap_const_lv5_1));
    n_chunk_fu_251_p3 <= 
        trunc_ln_fu_235_p4 when (icmp_ln34_fu_229_p2(0) = '1') else 
        add_ln34_fu_245_p2;
    n_iter_fu_289_p3 <= 
        zext_ln35_fu_279_p1 when (icmp_ln35_fu_263_p2(0) = '1') else 
        add_ln35_fu_283_p2;

    ofst_buff_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln61_fu_456_p1, p_sum1_cast_fu_481_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ofst_buff_address1 <= p_sum1_cast_fu_481_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ofst_buff_address1 <= zext_ln61_fu_456_p1(19 - 1 downto 0);
        else 
            ofst_buff_address1 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ofst_buff_ce1_assign_proc : process(rd_port_TVALID, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((rd_port_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ofst_buff_ce1 <= ap_const_logic_1;
        else 
            ofst_buff_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ofst_buff_d1_assign_proc : process(ap_CS_fsm_state6, p_cast_reg_559, ap_CS_fsm_state7, empty_160_fu_461_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ofst_buff_d1 <= p_cast_reg_559;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ofst_buff_d1 <= empty_160_fu_461_p1;
        else 
            ofst_buff_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ofst_buff_ptr_2_fu_486_p2 <= std_logic_vector(unsigned(ofst_buff_ptr_1_reg_214) + unsigned(ap_const_lv32_1));

    ofst_buff_we1_assign_proc : process(rd_port_TVALID, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((rd_port_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ofst_buff_we1 <= ap_const_logic_1;
        else 
            ofst_buff_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_sum1_cast_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum1_fu_476_p2),64));
    p_sum1_fu_476_p2 <= (shl_ln3_reg_554 or ap_const_lv19_1);

    rd_port_TDATA_blk_n_assign_proc : process(rd_port_TVALID, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            rd_port_TDATA_blk_n <= rd_port_TVALID;
        else 
            rd_port_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rd_port_TREADY_assign_proc : process(rd_port_TVALID, ap_CS_fsm_state6)
    begin
        if (((rd_port_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            rd_port_TREADY <= ap_const_logic_1;
        else 
            rd_port_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    rd_req_V_blk_n_assign_proc : process(rd_req_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln46_reg_546)
    begin
        if (((icmp_ln46_reg_546 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rd_req_V_blk_n <= rd_req_V_full_n;
        else 
            rd_req_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    rd_req_V_din <= (tmp_arlen_V_2_fu_399_p3 & zext_ln308_fu_423_p1);

    rd_req_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln46_reg_546, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln46_reg_546 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rd_req_V_write <= ap_const_logic_1;
        else 
            rd_req_V_write <= ap_const_logic_0;
        end if; 
    end process;


    rd_start_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            rd_start <= ap_const_logic_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            rd_start <= ap_const_logic_1;
        else 
            rd_start <= 'X';
        end if; 
    end process;


    rd_start_ap_vld_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            rd_start_ap_vld <= ap_const_logic_1;
        else 
            rd_start_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln44_fu_317_p3 <= 
        ap_const_lv5_10 when (icmp_ln35_fu_263_p2(0) = '1') else 
        zext_ln44_fu_313_p1;
        sext_ln52_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub36_fu_352_p2),6));

    shl_ln3_fu_448_p3 <= (trunc_ln61_fu_444_p1 & ap_const_lv1_0);
    shl_ln_fu_366_p3 <= (trunc_ln52_fu_362_p1 & ap_const_lv4_0);
    sub36_fu_352_p2 <= std_logic_vector(unsigned(tail_fu_345_p3) + unsigned(ap_const_lv5_1F));
        sub_cast_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_fu_297_p2),14));

    sub_fu_297_p2 <= std_logic_vector(unsigned(n_iter_fu_289_p3) + unsigned(ap_const_lv13_1FFF));
    tail_fu_345_p3 <= 
        select_ln44_reg_507 when (icmp_ln44_fu_340_p2(0) = '1') else 
        ap_const_lv5_10;
    tmp_arlen_V_2_fu_399_p3 <= 
        tmp_arlen_V_reg_502 when (and_ln47_fu_394_p2(0) = '1') else 
        ap_const_lv4_F;
    tmp_arlen_V_fu_307_p2 <= std_logic_vector(unsigned(empty_fu_225_p1) + unsigned(ap_const_lv4_F));
    trunc_ln34_fu_259_p1 <= n_chunk_fu_251_p3(4 - 1 downto 0);
    trunc_ln35_1_fu_269_p4 <= n_chunk_fu_251_p3(15 downto 4);
    trunc_ln52_fu_362_p1 <= i_reg_179(12 - 1 downto 0);
    trunc_ln61_fu_444_p1 <= ofst_buff_ptr_1_reg_214(18 - 1 downto 0);
    trunc_ln_fu_235_p4 <= size(19 downto 4);
    v2_V_fu_415_p3 <= (add_ln301_fu_410_p2 & ap_const_lv8_0);
    zext_ln301_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_202),16));
    zext_ln308_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v2_V_fu_415_p3),28));
    zext_ln35_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln35_1_fu_269_p4),13));
    zext_ln42_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_179),14));
    zext_ln44_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln34_fu_259_p1),5));
    zext_ln46_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_202),6));
    zext_ln61_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_448_p3),64));
end behav;
