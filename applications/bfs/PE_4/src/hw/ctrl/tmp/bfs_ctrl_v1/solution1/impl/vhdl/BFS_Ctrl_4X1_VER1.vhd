-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BFS_Ctrl_4X1_VER1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dummyParam : IN STD_LOGIC;
    N_Vertex : IN STD_LOGIC_VECTOR (31 downto 0);
    resWrite : OUT STD_LOGIC;
    glblIterIdx : OUT STD_LOGIC_VECTOR (15 downto 0);
    cnt_scatter_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cnt_scatter_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    cnt_scatter_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    cnt_scatter_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    cnt_gather_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cnt_gather_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    cnt_gather_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    cnt_gather_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    exist_0 : IN STD_LOGIC;
    exist_1 : IN STD_LOGIC;
    exist_2 : IN STD_LOGIC;
    exist_3 : IN STD_LOGIC );
end;


architecture behav of BFS_Ctrl_4X1_VER1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "BFS_Ctrl_4X1_VER1_BFS_Ctrl_4X1_VER1,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.470000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=143,HLS_SYN_LUT=358,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal resWrite_1_data_reg : STD_LOGIC := '0';
    signal resWrite_1_data_in : STD_LOGIC;
    signal resWrite_1_vld_reg : STD_LOGIC := '0';
    signal resWrite_1_vld_in : STD_LOGIC;
    signal resWrite_1_ack_in : STD_LOGIC;
    signal glblIterIdx_1_data_reg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal glblIterIdx_1_vld_reg : STD_LOGIC := '0';
    signal glblIterIdx_1_vld_in : STD_LOGIC;
    signal glblIterIdx_1_ack_in : STD_LOGIC;
    signal iterIdx : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal icmp_ln42_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_250 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal cnt_gather_0_read_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal cnt_gather_0_read_1_reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal cnt_gather_0_read_2_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_BFS_PE_fu_172_ap_start : STD_LOGIC;
    signal grp_BFS_PE_fu_172_ap_done : STD_LOGIC;
    signal grp_BFS_PE_fu_172_ap_idle : STD_LOGIC;
    signal grp_BFS_PE_fu_172_ap_ready : STD_LOGIC;
    signal grp_BFS_PE_fu_172_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exist_0_read_read_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exist_1_read_read_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exist_2_read_read_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exist_3_read_read_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln63_fu_231_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln42_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln51_1_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln51_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_1_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln51_2_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_2_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln51_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component BFS_Ctrl_4X1_VER1_BFS_PE IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dummyParam : IN STD_LOGIC );
    end component;



begin
    grp_BFS_PE_fu_172 : component BFS_Ctrl_4X1_VER1_BFS_PE
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_BFS_PE_fu_172_ap_start,
        ap_done => grp_BFS_PE_fu_172_ap_done,
        ap_idle => grp_BFS_PE_fu_172_ap_idle,
        ap_ready => grp_BFS_PE_fu_172_ap_ready,
        dummyParam => dummyParam);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_BFS_PE_fu_172_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_BFS_PE_fu_172_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state9) and ((icmp_ln42_reg_250 = ap_const_lv1_0) or ((exist_3_read_read_fu_165_p2 = ap_const_lv1_0) and (exist_2_read_read_fu_159_p2 = ap_const_lv1_0) and (exist_1_read_read_fu_153_p2 = ap_const_lv1_0) and (exist_0_read_read_fu_147_p2 = ap_const_lv1_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln42_fu_187_p2 = ap_const_lv1_1)))) then 
                    grp_BFS_PE_fu_172_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_BFS_PE_fu_172_ap_ready = ap_const_logic_1)) then 
                    grp_BFS_PE_fu_172_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    glblIterIdx_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    resWrite_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                cnt_gather_0_read_1_reg_259 <= cnt_gather_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                cnt_gather_0_read_2_reg_264 <= cnt_gather_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                cnt_gather_0_read_reg_254 <= cnt_gather_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_const_logic_1) and (glblIterIdx_1_vld_in = ap_const_logic_1) and (glblIterIdx_1_vld_reg = ap_const_logic_1)) or (not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (glblIterIdx_1_vld_in = ap_const_logic_1) and (glblIterIdx_1_vld_reg = ap_const_logic_0)))) then
                glblIterIdx_1_data_reg <= iterIdx;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln42_reg_250 <= icmp_ln42_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (((((exist_2_read_read_fu_159_p2 = ap_const_lv1_1) and (icmp_ln42_reg_250 = ap_const_lv1_1)) or ((exist_3_read_read_fu_165_p2 = ap_const_lv1_1) and (icmp_ln42_reg_250 = ap_const_lv1_1))) or ((exist_1_read_read_fu_153_p2 = ap_const_lv1_1) and (icmp_ln42_reg_250 = ap_const_lv1_1))) or ((exist_0_read_read_fu_147_p2 = ap_const_lv1_1) and (icmp_ln42_reg_250 = ap_const_lv1_1))))) then
                iterIdx <= add_ln63_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_const_logic_1) and (resWrite_1_vld_in = ap_const_logic_1) and (resWrite_1_vld_reg = ap_const_logic_1)) or (not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (resWrite_1_vld_in = ap_const_logic_1) and (resWrite_1_vld_reg = ap_const_logic_0)))) then
                resWrite_1_data_reg <= resWrite_1_data_in;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, resWrite_1_ack_in, glblIterIdx_1_ack_in, icmp_ln42_fu_187_p2, icmp_ln42_reg_250, ap_CS_fsm_state3, grp_BFS_PE_fu_172_ap_done, ap_CS_fsm_state9, exist_0_read_read_fu_147_p2, exist_1_read_read_fu_153_p2, exist_2_read_read_fu_159_p2, exist_3_read_read_fu_165_p2, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state8, icmp_ln51_fu_225_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln42_fu_187_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_BFS_PE_fu_172_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln51_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (((((exist_2_read_read_fu_159_p2 = ap_const_lv1_1) and (icmp_ln42_reg_250 = ap_const_lv1_1)) or ((exist_3_read_read_fu_165_p2 = ap_const_lv1_1) and (icmp_ln42_reg_250 = ap_const_lv1_1))) or ((exist_1_read_read_fu_153_p2 = ap_const_lv1_1) and (icmp_ln42_reg_250 = ap_const_lv1_1))) or ((exist_0_read_read_fu_147_p2 = ap_const_lv1_1) and (icmp_ln42_reg_250 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((glblIterIdx_1_ack_in = ap_const_logic_0) or (resWrite_1_ack_in = ap_const_logic_0) or (grp_BFS_PE_fu_172_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln51_1_fu_198_p2 <= std_logic_vector(unsigned(cnt_scatter_2) + unsigned(cnt_scatter_3));
    add_ln51_2_fu_204_p2 <= std_logic_vector(unsigned(add_ln51_1_fu_198_p2) + unsigned(add_ln51_fu_192_p2));
    add_ln51_fu_192_p2 <= std_logic_vector(unsigned(cnt_scatter_1) + unsigned(cnt_scatter_0));
    add_ln52_1_fu_214_p2 <= std_logic_vector(unsigned(cnt_gather_0_read_2_reg_264) + unsigned(cnt_gather_0));
    add_ln52_2_fu_219_p2 <= std_logic_vector(unsigned(add_ln52_1_fu_214_p2) + unsigned(add_ln52_fu_210_p2));
    add_ln52_fu_210_p2 <= std_logic_vector(unsigned(cnt_gather_0_read_1_reg_259) + unsigned(cnt_gather_0_read_reg_254));
    add_ln63_fu_231_p2 <= std_logic_vector(unsigned(iterIdx) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_assign_proc : process(resWrite_1_ack_in, glblIterIdx_1_ack_in)
    begin
                ap_block_state10 <= ((glblIterIdx_1_ack_in = ap_const_logic_0) or (resWrite_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(resWrite_1_ack_in, glblIterIdx_1_ack_in, grp_BFS_PE_fu_172_ap_done, ap_CS_fsm_state10)
    begin
        if ((not(((glblIterIdx_1_ack_in = ap_const_logic_0) or (resWrite_1_ack_in = ap_const_logic_0) or (grp_BFS_PE_fu_172_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(resWrite_1_ack_in, glblIterIdx_1_ack_in, grp_BFS_PE_fu_172_ap_done, ap_CS_fsm_state10)
    begin
        if ((not(((glblIterIdx_1_ack_in = ap_const_logic_0) or (resWrite_1_ack_in = ap_const_logic_0) or (grp_BFS_PE_fu_172_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exist_0_read_read_fu_147_p2 <= (0=>exist_0, others=>'-');
    exist_1_read_read_fu_153_p2 <= (0=>exist_1, others=>'-');
    exist_2_read_read_fu_159_p2 <= (0=>exist_2, others=>'-');
    exist_3_read_read_fu_165_p2 <= (0=>exist_3, others=>'-');
    glblIterIdx <= glblIterIdx_1_data_reg;

    glblIterIdx_1_ack_in_assign_proc : process(glblIterIdx_1_vld_reg)
    begin
        if (((glblIterIdx_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (glblIterIdx_1_vld_reg = ap_const_logic_1)))) then 
            glblIterIdx_1_ack_in <= ap_const_logic_1;
        else 
            glblIterIdx_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    glblIterIdx_1_vld_in_assign_proc : process(icmp_ln42_fu_187_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln42_fu_187_p2 = ap_const_lv1_1))) then 
            glblIterIdx_1_vld_in <= ap_const_logic_1;
        else 
            glblIterIdx_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    grp_BFS_PE_fu_172_ap_start <= grp_BFS_PE_fu_172_ap_start_reg;
    icmp_ln42_fu_187_p2 <= "1" when (unsigned(zext_ln42_fu_183_p1) < unsigned(N_Vertex)) else "0";
    icmp_ln51_fu_225_p2 <= "1" when (add_ln51_2_fu_204_p2 = add_ln52_2_fu_219_p2) else "0";
    resWrite <= resWrite_1_data_reg;

    resWrite_1_ack_in_assign_proc : process(resWrite_1_vld_reg)
    begin
        if (((resWrite_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (resWrite_1_vld_reg = ap_const_logic_1)))) then 
            resWrite_1_ack_in <= ap_const_logic_1;
        else 
            resWrite_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    resWrite_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln42_fu_187_p2, icmp_ln42_reg_250, ap_CS_fsm_state3, ap_CS_fsm_state9, exist_0_read_read_fu_147_p2, exist_1_read_read_fu_153_p2, exist_2_read_read_fu_159_p2, exist_3_read_read_fu_165_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and ((icmp_ln42_reg_250 = ap_const_lv1_0) or ((exist_3_read_read_fu_165_p2 = ap_const_lv1_0) and (exist_2_read_read_fu_159_p2 = ap_const_lv1_0) and (exist_1_read_read_fu_153_p2 = ap_const_lv1_0) and (exist_0_read_read_fu_147_p2 = ap_const_lv1_0))))) then 
            resWrite_1_data_in <= ap_const_logic_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln42_fu_187_p2 = ap_const_lv1_1)))) then 
            resWrite_1_data_in <= ap_const_logic_0;
        else 
            resWrite_1_data_in <= 'X';
        end if; 
    end process;


    resWrite_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln42_fu_187_p2, icmp_ln42_reg_250, ap_CS_fsm_state3, ap_CS_fsm_state9, exist_0_read_read_fu_147_p2, exist_1_read_read_fu_153_p2, exist_2_read_read_fu_159_p2, exist_3_read_read_fu_165_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and ((icmp_ln42_reg_250 = ap_const_lv1_0) or ((exist_3_read_read_fu_165_p2 = ap_const_lv1_0) and (exist_2_read_read_fu_159_p2 = ap_const_lv1_0) and (exist_1_read_read_fu_153_p2 = ap_const_lv1_0) and (exist_0_read_read_fu_147_p2 = ap_const_lv1_0)))) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln42_fu_187_p2 = ap_const_lv1_1)))) then 
            resWrite_1_vld_in <= ap_const_logic_1;
        else 
            resWrite_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln42_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iterIdx),32));
end behav;
