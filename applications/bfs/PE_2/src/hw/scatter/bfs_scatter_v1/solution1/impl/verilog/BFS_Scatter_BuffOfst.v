// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BFS_Scatter_BuffOfst (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rd_req_V_din,
        rd_req_V_full_n,
        rd_req_V_write,
        rd_start,
        rd_start_ap_vld,
        ofst_buff_address1,
        ofst_buff_ce1,
        ofst_buff_we1,
        ofst_buff_d1,
        rd_port_TDATA,
        rd_port_TVALID,
        rd_port_TREADY,
        rd_port_TKEEP,
        rd_port_TSTRB,
        rd_port_TLAST,
        size
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_state5 = 7'd8;
parameter    ap_ST_fsm_state6 = 7'd16;
parameter    ap_ST_fsm_state7 = 7'd32;
parameter    ap_ST_fsm_state8 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] rd_req_V_din;
input   rd_req_V_full_n;
output   rd_req_V_write;
output   rd_start;
output   rd_start_ap_vld;
output  [19:0] ofst_buff_address1;
output   ofst_buff_ce1;
output   ofst_buff_we1;
output  [63:0] ofst_buff_d1;
input  [127:0] rd_port_TDATA;
input   rd_port_TVALID;
output   rd_port_TREADY;
input  [15:0] rd_port_TKEEP;
input  [15:0] rd_port_TSTRB;
input  [0:0] rd_port_TLAST;
input  [19:0] size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rd_req_V_write;
reg rd_start;
reg rd_start_ap_vld;
reg[19:0] ofst_buff_address1;
reg ofst_buff_ce1;
reg ofst_buff_we1;
reg[63:0] ofst_buff_d1;
reg rd_port_TREADY;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    rd_req_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln46_reg_546;
reg    rd_port_TDATA_blk_n;
wire    ap_CS_fsm_state6;
reg   [4:0] j_reg_202;
wire   [12:0] n_iter_fu_289_p3;
reg   [12:0] n_iter_reg_492;
wire  signed [13:0] sub_cast_fu_303_p1;
reg  signed [13:0] sub_cast_reg_497;
wire   [3:0] tmp_arlen_V_fu_307_p2;
reg   [3:0] tmp_arlen_V_reg_502;
wire   [4:0] select_ln44_fu_317_p3;
reg   [4:0] select_ln44_reg_507;
wire   [12:0] i_2_fu_325_p2;
reg   [12:0] i_2_reg_512;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln42_fu_331_p2;
wire   [0:0] icmp_ln44_fu_340_p2;
reg   [0:0] icmp_ln44_reg_521;
wire   [4:0] tail_fu_345_p3;
reg   [4:0] tail_reg_526;
wire  signed [5:0] sext_ln52_fu_358_p1;
reg  signed [5:0] sext_ln52_reg_531;
wire   [15:0] shl_ln_fu_366_p3;
reg   [15:0] shl_ln_reg_536;
wire   [4:0] j_3_fu_374_p2;
reg   [4:0] j_3_reg_541;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln46_fu_380_p2;
reg   [0:0] rd_pkt_last_V_reg_550;
wire   [19:0] shl_ln3_fu_448_p3;
reg   [19:0] shl_ln3_reg_554;
reg   [63:0] p_cast_reg_559;
wire   [31:0] ofst_buff_ptr_2_fu_486_p2;
reg   [31:0] ofst_buff_ptr_2_reg_564;
wire    ap_CS_fsm_state7;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [12:0] i_reg_179;
wire    ap_CS_fsm_state8;
reg   [31:0] ofst_buff_ptr_reg_190;
reg   [4:0] ap_phi_mux_j_phi_fu_206_p4;
reg   [31:0] ofst_buff_ptr_1_reg_214;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln61_fu_456_p1;
wire   [63:0] p_sum1_cast_fu_481_p1;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] empty_158_fu_461_p1;
wire   [3:0] empty_fu_225_p1;
wire   [15:0] trunc_ln_fu_235_p4;
wire   [0:0] icmp_ln34_fu_229_p2;
wire   [15:0] add_ln34_fu_245_p2;
wire   [15:0] n_chunk_fu_251_p3;
wire   [3:0] trunc_ln34_fu_259_p1;
wire   [11:0] trunc_ln35_1_fu_269_p4;
wire   [12:0] zext_ln35_fu_279_p1;
wire   [0:0] icmp_ln35_fu_263_p2;
wire   [12:0] add_ln35_fu_283_p2;
wire   [12:0] sub_fu_297_p2;
wire   [4:0] zext_ln44_fu_313_p1;
wire   [13:0] zext_ln42_fu_336_p1;
wire   [4:0] sub36_fu_352_p2;
wire   [11:0] trunc_ln52_fu_362_p1;
wire   [5:0] zext_ln46_fu_385_p1;
wire   [0:0] icmp_ln47_fu_389_p2;
wire   [0:0] and_ln47_fu_394_p2;
wire   [15:0] zext_ln301_fu_406_p1;
wire   [15:0] add_ln301_fu_410_p2;
wire   [23:0] v2_V_fu_415_p3;
wire   [3:0] tmp_arlen_V_2_fu_399_p3;
wire   [27:0] zext_ln308_fu_423_p1;
wire   [18:0] trunc_ln61_fu_444_p1;
wire   [19:0] p_sum1_fu_476_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln42_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln42_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_179 <= i_2_reg_512;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_179 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_reg_546 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_202 <= j_3_reg_541;
    end else if (((icmp_ln42_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_202 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (rd_pkt_last_V_reg_550 == 1'd0))) begin
        ofst_buff_ptr_1_reg_214 <= ofst_buff_ptr_2_fu_486_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ofst_buff_ptr_1_reg_214 <= ofst_buff_ptr_reg_190;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ofst_buff_ptr_reg_190 <= ofst_buff_ptr_2_reg_564;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ofst_buff_ptr_reg_190 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_512 <= i_2_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln44_reg_521 <= icmp_ln44_fu_340_p2;
        sext_ln52_reg_531 <= sext_ln52_fu_358_p1;
        shl_ln_reg_536[15 : 4] <= shl_ln_fu_366_p3[15 : 4];
        tail_reg_526 <= tail_fu_345_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln46_reg_546 <= icmp_ln46_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_3_reg_541 <= j_3_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        n_iter_reg_492 <= n_iter_fu_289_p3;
        select_ln44_reg_507 <= select_ln44_fu_317_p3;
        sub_cast_reg_497 <= sub_cast_fu_303_p1;
        tmp_arlen_V_reg_502 <= tmp_arlen_V_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ofst_buff_ptr_2_reg_564 <= ofst_buff_ptr_2_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_cast_reg_559 <= {{rd_port_TDATA[127:64]}};
        rd_pkt_last_V_reg_550 <= rd_port_TLAST;
        shl_ln3_reg_554[19 : 1] <= shl_ln3_fu_448_p3[19 : 1];
    end
end

always @ (*) begin
    if ((icmp_ln46_fu_380_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln42_fu_331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_546 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_206_p4 = j_3_reg_541;
    end else begin
        ap_phi_mux_j_phi_fu_206_p4 = j_reg_202;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ofst_buff_address1 = p_sum1_cast_fu_481_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ofst_buff_address1 = zext_ln61_fu_456_p1;
    end else begin
        ofst_buff_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((rd_port_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        ofst_buff_ce1 = 1'b1;
    end else begin
        ofst_buff_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ofst_buff_d1 = p_cast_reg_559;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ofst_buff_d1 = empty_158_fu_461_p1;
    end else begin
        ofst_buff_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((rd_port_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        ofst_buff_we1 = 1'b1;
    end else begin
        ofst_buff_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rd_port_TDATA_blk_n = rd_port_TVALID;
    end else begin
        rd_port_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((rd_port_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        rd_port_TREADY = 1'b1;
    end else begin
        rd_port_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_546 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rd_req_V_blk_n = rd_req_V_full_n;
    end else begin
        rd_req_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_546 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rd_req_V_write = 1'b1;
    end else begin
        rd_req_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        rd_start = 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        rd_start = 1'd1;
    end else begin
        rd_start = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8))) begin
        rd_start_ap_vld = 1'b1;
    end else begin
        rd_start_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln42_fu_331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln46_fu_380_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln46_fu_380_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((rd_port_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (rd_pkt_last_V_reg_550 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln301_fu_410_p2 = (shl_ln_reg_536 + zext_ln301_fu_406_p1);

assign add_ln34_fu_245_p2 = (trunc_ln_fu_235_p4 + 16'd1);

assign add_ln35_fu_283_p2 = (zext_ln35_fu_279_p1 + 13'd1);

assign and_ln47_fu_394_p2 = (icmp_ln47_fu_389_p2 & icmp_ln44_reg_521);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln46_reg_546 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rd_req_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln46_reg_546 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rd_req_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln46_reg_546 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (rd_req_V_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln46_reg_546 == 1'd0) & (rd_req_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_158_fu_461_p1 = rd_port_TDATA[63:0];

assign empty_fu_225_p1 = size[3:0];

assign i_2_fu_325_p2 = (i_reg_179 + 13'd1);

assign icmp_ln34_fu_229_p2 = ((empty_fu_225_p1 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_263_p2 = ((trunc_ln34_fu_259_p1 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_331_p2 = ((i_reg_179 == n_iter_reg_492) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_340_p2 = ((zext_ln42_fu_336_p1 == sub_cast_reg_497) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_380_p2 = ((ap_phi_mux_j_phi_fu_206_p4 == tail_reg_526) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_389_p2 = ((zext_ln46_fu_385_p1 == sext_ln52_reg_531) ? 1'b1 : 1'b0);

assign j_3_fu_374_p2 = (ap_phi_mux_j_phi_fu_206_p4 + 5'd1);

assign n_chunk_fu_251_p3 = ((icmp_ln34_fu_229_p2[0:0] == 1'b1) ? trunc_ln_fu_235_p4 : add_ln34_fu_245_p2);

assign n_iter_fu_289_p3 = ((icmp_ln35_fu_263_p2[0:0] == 1'b1) ? zext_ln35_fu_279_p1 : add_ln35_fu_283_p2);

assign ofst_buff_ptr_2_fu_486_p2 = (ofst_buff_ptr_1_reg_214 + 32'd1);

assign p_sum1_cast_fu_481_p1 = p_sum1_fu_476_p2;

assign p_sum1_fu_476_p2 = (shl_ln3_reg_554 | 20'd1);

assign rd_req_V_din = {{tmp_arlen_V_2_fu_399_p3}, {zext_ln308_fu_423_p1}};

assign select_ln44_fu_317_p3 = ((icmp_ln35_fu_263_p2[0:0] == 1'b1) ? 5'd16 : zext_ln44_fu_313_p1);

assign sext_ln52_fu_358_p1 = $signed(sub36_fu_352_p2);

assign shl_ln3_fu_448_p3 = {{trunc_ln61_fu_444_p1}, {1'd0}};

assign shl_ln_fu_366_p3 = {{trunc_ln52_fu_362_p1}, {4'd0}};

assign sub36_fu_352_p2 = ($signed(tail_fu_345_p3) + $signed(5'd31));

assign sub_cast_fu_303_p1 = $signed(sub_fu_297_p2);

assign sub_fu_297_p2 = ($signed(n_iter_fu_289_p3) + $signed(13'd8191));

assign tail_fu_345_p3 = ((icmp_ln44_fu_340_p2[0:0] == 1'b1) ? select_ln44_reg_507 : 5'd16);

assign tmp_arlen_V_2_fu_399_p3 = ((and_ln47_fu_394_p2[0:0] == 1'b1) ? tmp_arlen_V_reg_502 : 4'd15);

assign tmp_arlen_V_fu_307_p2 = ($signed(empty_fu_225_p1) + $signed(4'd15));

assign trunc_ln34_fu_259_p1 = n_chunk_fu_251_p3[3:0];

assign trunc_ln35_1_fu_269_p4 = {{n_chunk_fu_251_p3[15:4]}};

assign trunc_ln52_fu_362_p1 = i_reg_179[11:0];

assign trunc_ln61_fu_444_p1 = ofst_buff_ptr_1_reg_214[18:0];

assign trunc_ln_fu_235_p4 = {{size[19:4]}};

assign v2_V_fu_415_p3 = {{add_ln301_fu_410_p2}, {8'd0}};

assign zext_ln301_fu_406_p1 = j_reg_202;

assign zext_ln308_fu_423_p1 = v2_V_fu_415_p3;

assign zext_ln35_fu_279_p1 = trunc_ln35_1_fu_269_p4;

assign zext_ln42_fu_336_p1 = i_reg_179;

assign zext_ln44_fu_313_p1 = trunc_ln34_fu_259_p1;

assign zext_ln46_fu_385_p1 = j_reg_202;

assign zext_ln61_fu_456_p1 = shl_ln3_fu_448_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_536[3:0] <= 4'b0000;
    shl_ln3_reg_554[0] <= 1'b0;
end

endmodule //BFS_Scatter_BuffOfst
